#TEMPLATE "_SKILL_Base" : Target_PurifyingFire
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_PurifyingFire=-1000000
// [GLOBAL_VARS]
FLOAT:%Target_PurifyingFire_MyInitiative
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_PurifyingFire
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_PurifyingFire")
ACTIONS
	Set(%SkillTargetScore_Target_PurifyingFire, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1"
		CharacterGetStat(%Target_PurifyingFire_MyInitiative, __Me, Initiative)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_Target_PurifyingFire", Lowest, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_Target_PurifyingFire, null)
		THEN
			Add(%ActionScore_Target_PurifyingFire, %SkillTargetScore_Target_PurifyingFire)
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
// Calculate the character we should target
EVENT CalculateTarget_Target_PurifyingFire
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_PurifyingFire
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_SaveScore
	FLOAT:_Vitality
	FLOAT:_TargetInit
	FLOAT:_HealWeight
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_PurifyingFire")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "(c1&!c2)|(c3&c4)"
			CharacterIsAlly(__Me, _Char)
			CharacterHasStatus(_Char CHARMED)
			CharacterIsEnemy(__Me, _Char)
			CharacterHasStatus(_Char CHARMED)
		THEN
			IF "!c1"
				CharacterIsSummon(_Char)
			THEN
				IF "c1|c2|c3|c4"
					CharacterHasStatus(_Char, CHARMED)
					CharacterHasStatus(_Char, FROZEN)
					CharacterHasStatus(_Char, STUNNED)
					CharacterHasStatus(_Char, CRAWLING_INFESTATION)
				THEN
					//Triage score calculation: weigh against low vitality
					//targets with healing magic active.
					IF "c1"
						CharacterGetStat(_Vitality, _Char, Vitality)
					THEN
						Add(_Vitality, -1.0)
						Multiply(_Vitality, 5.0)
						
						//Consider the danger of removing heals on hurt targets.
						Set(_HealWeight, 1.0)
						IF "c1"
							CharacterHasStatus(_Char, HEALING)
						THEN
							Add(_HealWeight, 1.0)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, CONSUME, AMER_Regenerate)
						THEN
							Add(_HealWeight, 1.3)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, CONSUME, AMER_MassHeal)
						THEN
							Add(_HealWeight, 2.0)
						ENDIF
						Multiply(_Vitality, _HealWeight)
						
						Add(_Score, _Vitality)
					ENDIF
					
					//Status removal calculation
					IF "c1"
						CharacterHasStatus(_Char, CHARMED)
					THEN
						//Worth more if target hasn't taken their turn yet.
						IF "c1"
							CharacterGetStat(_TargetInit, _Char, Initiative)
						THEN
							IF "c1"
								IsLessThen(_TargetInit, %Target_PurifyingFire_MyInitiative)
							THEN
								Add(_Score, 10.0)
							ELSE
								Add(_Score, 8.0
							ENDIF
						ENDIF
					ENDIF
					IF "c1"
						CharacterHasStatus(_Char, FROZEN)
					THEN
						//Worth more if target hasn't taken their turn yet.
						IF "c1"
							CharacterGetStat(_TargetInit, _Char, Initiative)
						THEN
							IF "c1"
								IsLessThen(_TargetInit, %Target_PurifyingFire_MyInitiative)
							THEN
								Add(_Score, 3.5)
							ELSE
								Add(_Score, 2.0)
							ENDIF
						ENDIF
					ENDIF
					IF "c1"
						CharacterHasStatus(_Char, STUNNED)
					THEN
						//Worth more if target hasn't taken their turn yet.
						IF "c1"
							CharacterGetStat(_TargetInit, _Char, Initiative)
						THEN
							IF "c1"
								IsLessThen(_TargetInit, %Target_PurifyingFire_MyInitiative)
							THEN
								Add(_Score, 4.0)
							ELSE
								Add(_Score, 3.0)
							ENDIF
						ENDIF
					ENDIF
					IF "c1"
						CharacterHasStatus(_Char, CRAWLING_INFESTATION)
					THEN
						Add(_Score, 15.0)
					ENDIF
					
					//Don't bother using if the score was too low before
					//considering range or LoS.
					IF "!c1"
						IsLessThen(_Score, 0.0)
					THEN
						// Range score calculation
						IF "c1&c2"
							CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_PurifyingFire)
							GetDistance(_DistanceToChar, __Me, _Char)
						THEN
							Set(_DistanceScore, _DistanceToChar)
							IF "c1"
								IsGreaterThen(_DistanceScore, _SkillRangeMax)
							THEN
								Subtract(_DistanceScore, _SkillRangeMax)
								Multiply(_DistanceScore, -1.0)
							ELIF "c1"
								IsLessThen(_DistanceScore, _SkillRangeMin)
							THEN
								Subtract(_DistanceScore, _SkillRangeMin)
								Multiply(_DistanceScore, 1.0)
							ELSE 
								Set(_DistanceScore, 0.0)
							ENDIF
							Add(_Score, _DistanceScore)
						ENDIF
						
						// Can see score calculation
						IF "!c1"
							CharacterCanSee(__Me, _Char)
						THEN
							Add(_Score, -10.0)
						ENDIF
					
						IF "c1"
							IsGreaterThen(_Score, %SkillTargetScore_Target_PurifyingFire)
						THEN
							Set(%SkillTargetChar_Target_PurifyingFire, _Char)
							Set(%SkillTargetScore_Target_PurifyingFire, _Score)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ELIF "c1&!c2"
			CharacterIsEnemy(__Me, _Char)
			CharacterHasStatus(_Char CHARMED)
		THEN
			IF "c1|c2"
				CharacterHasStatus(_Char, HEALING)
				CharacterHasStatus(_Char, CONSUME, AMER_MassHeal)
			THEN
				IF "!c1"
					CharacterIsSummon(_Char)
				THEN
					IF "!c1&!c2"
						CharacterHasStatus(_Char, INVISIBLE)
						CharacterHasStatus(_Char, SNEAKING)
					THEN
						IF "!c1&!c2&!c3"
							CharacterHasStatus(_Char, FROZEN)
							CharacterHasStatus(_Char, STUNNED)
							CharacterHasStatus(_Char, CRAWLING_INFESTATION)
						THEN
							//Kill range calculation: Favor low Vitality.
							IF "c1"
								CharacterGetStat(_Vitality, _Char, Vitality)
							THEN
								Multiply(_Vitality, -1.0)
								Add(_Vitality, 1.0)
								Multiply(_Vitality, 5.0)
								Add(_Score, _Vitality)
							ENDIF
							
							//Heal/Shield removal calculation
							IF "c1"
								CharacterHasStatus(_Char, HEALING)
							THEN
								Add(_Score, 1.5)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, AMER_Regenerate)
							THEN
								Add(_Score, 1.8)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, AMER_MassHeal)
							THEN
								Add(_Score, 2.5)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, SKILLBOOST_Shield_Water)
							THEN
								Add(_Score, 1.1)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, SKILLBOOST_Shield_Fire)
							THEN
								Add(_Score, 1.1)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, SKILLBOOST_Shield_Earth)
							THEN
								Add(_Score, 1.1)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, SKILLBOOST_Shield_Air)
							THEN
								Add(_Score, 1.1)
							ENDIF
					
							// Range score calculation
							IF "c1&c2"
								CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_PurifyingFire)
								GetDistance(_DistanceToChar, __Me, _Char)
							THEN
								Set(_DistanceScore, _DistanceToChar)
								IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
								THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
								ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
								THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
								ELSE 
									Set(_DistanceScore, 0.0)
								ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
							
							// Can see score calculation
							IF "!c1"
								CharacterCanSee(__Me, _Char)
							THEN
								Add(_Score, -10.0)
							ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_Target_PurifyingFire)
							THEN
								Set(%SkillTargetChar_Target_PurifyingFire, _Char)
								Set(%SkillTargetScore_Target_PurifyingFire, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	