#TEMPLATE "_SKILL_Base" : Target_Fatality

INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_Fatality=-1000000
// [GLOBAL_VARS]
// [~GLOBAL_VARS]

EVENTS

// [EVENTS]
// [~EVENTS]

// Calculate the priority of the skill
EVENT CalculateScore_Target_Fatality
VARS
	// [CALC_VARS]
	INT:_Chain
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_Fatality")
ACTIONS
	Set(%SkillTargetScore_Target_Fatality, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1&c2"
		GetVar(_Chain, __Me, "AMER_Chain")
		IsGreaterThen(_Chain, INT:4)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_Target_Fatality", Lowest, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_Target_Fatality, null)
		THEN
			Add(%ActionScore_Target_Fatality, %SkillTargetScore_Target_Fatality)
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]

	

	
// Calculate the character we should attack
EVENT CalculateTarget_Target_Fatality
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_Fatality
	FLOAT:_StatVitality
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Armor
	FLOAT:_Level
	FLOAT:_Vitality
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_Fatality")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						//Kill range calculation.
						IF "c1&c2&c3"
							CharacterGetStat(_Vitality, _Char, Vitality)
							IsLessThen(_Vitality, 0.7)
							IsGreaterThen(_Vitality, 0.1)	//Don't waste it.
						THEN
							Multiply(_Vitality, -10.0)
							Add(_Vitality, 10.0)
							Add(_Score, _Vitality)
						ENDIF
						
						//Unmapped Armor calculation.
						IF "c1&c2"
							CharacterGetStat(_Armor, _Char, Armor)
							CharacterGetStat(_Level, _Char, Level)
						THEN
							SetVar(__Me, "AMER_UnmapAttributeValue", _Armor)
							SetVar(__Me, "AMER_UnmapAttributeLevel", _Level)
							CallFunction("AMER_UnmapArmor")
							IF "c1"
								GetVar(_Armor, __Me, "AMER_UnmapAttributeValue")
							THEN
								Multiply(_Armor, -1.0)
								Add(_Score, _Armor)
							ENDIF
						ENDIF
						
						//Marked.
						IF "c1"
							CharacterHasStatus(_Char, AGGRO_MARKED)
						THEN
							Add(_Score, 1.0)
						ENDIF
								
						//Summons are worth less.
						IF "c1"
							CharacterIsSummon(_Char)
						THEN
							Add(_Score, -5.0)
						ENDIF
						
						// Range score calculation
						IF "c1&c2"
							CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_Fatality)
							GetDistance(_DistanceToChar, __Me, _Char)
						THEN
							Set(_DistanceScore, _DistanceToChar)
							IF "c1"
								IsGreaterThen(_DistanceScore, _SkillRangeMax)
							THEN
								Subtract(_DistanceScore, _SkillRangeMax)
								Multiply(_DistanceScore, -1.0)
							ELIF "c1"
								IsLessThen(_DistanceScore, _SkillRangeMin)
							THEN
								Subtract(_DistanceScore, _SkillRangeMin)
								Multiply(_DistanceScore, 1.0)
							ELSE 
								Set(_DistanceScore, 0.0)
							ENDIF
							Add(_Score, _DistanceScore)
						ENDIF
						
						// Can see score calculation
						IF "!c1"
							CharacterCanSee(__Me, _Char)
						THEN
							Add(_Score, -10.0)
						ENDIF
						
						IF "c1"
							IsGreaterThen(_Score, %SkillTargetScore_Target_Fatality)
						THEN
							Set(%SkillTargetChar_Target_Fatality, _Char)
							Set(%SkillTargetScore_Target_Fatality, _Score)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	