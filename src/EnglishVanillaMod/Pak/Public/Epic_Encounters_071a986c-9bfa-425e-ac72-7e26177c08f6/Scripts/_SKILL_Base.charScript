//===============================================//
//                                               //
//       B A S E   S K I L L   W R A P P E R     //
//                                               //
//           Original script by Larian           //
//     Modified by Matteo "Ameranth" T. (2017)   //
//===============================================//
INIT
EXTERN FIXEDSTRING:%saveAPtext_$1="CMB_MageSkipsTurnToPrepare"
EXTERN INT:%displaySaveAPtext_$1=1
	
EXTERN INT:%frequency_$1=0
EXTERN INT:%frequencyStartAt_$1=0
EXTERN INT:%priority_$1=300
EXTERN INT:%disableInCasual_$1=0
EXTERN FLOAT:%MinLevel_$1 = -1.0
	
CHARACTER:__Me
INT:%ActionScore_$1=0
	
CHARACTER:%SkillTargetChar_$1=null
ITEM:%SkillTargetItem_$1=null
FLOAT3:%SkillTargetPos_$1=null
	
EVENTS
EVENT AddSkill_$1
ON
	OnInit()
ACTIONS
	CharacterAddSkill($1)
	
	
	
EVENT CalculateScoreWrapper_$1
VARS
	FLOAT:_Level
ON
	OnFunction("CalculateScore")
ACTIONS
	Set(%ActionScore_$1,0)
	IF "(c1|!c2)&c3"
		IsEqual(%disableInCasual_$1,0)
		IsCasual()
		CharacterCanCast(__Me,$1,1)
	THEN
		IF "c1"
			IsEqual(%MinLevel_$1, -1.0)
		THEN
			// Calculate default score
			IF "!c1"
				IsLessThen(%frequencyStartAt_$1,%frequency_$1)
			THEN
				Set(%ActionScore_$1,%priority_$1)
			ENDIF
			// Give specific scripts chance to overwrite score and let them calculate the target.
			Set(%SkillTargetChar_$1,null)
			Set(%SkillTargetItem_$1,null)
			Set(%SkillTargetPos_$1,null)
			CallFunction("CalculateScore_$1")
		ELIF "c1&!c2"
			CharacterGetStat(_Level, __Me, Level)
			IsLessThen(_Level, %MinLevel_$1)
		THEN
			// Calculate default score
			IF "!c1"
				IsLessThen(%frequencyStartAt_$1,%frequency_$1)
			THEN
				Set(%ActionScore_$1,%priority_$1)
			ENDIF
			// Give specific scripts chance to overwrite score and let them calculate the target.
			Set(%SkillTargetChar_$1,null)
			Set(%SkillTargetItem_$1,null)
			Set(%SkillTargetPos_$1,null)
			CallFunction("CalculateScore_$1")
		ENDIF
	ENDIF
	// Set the waiting reaction's priority
	IF "!c1|!c2|!c3" 
		IsEqual(%SkillTargetChar_$1,null)
		IsEqual(%SkillTargetItem_$1,null)
		IsEqual(%SkillTargetPos_$1,null)
	THEN
		SetPriority("WaitOnCast_$1",%ActionScore_$1)
	ELSE
		SetPriority("WaitOnCast_$1",0)
	ENDIF
	// Set the casting reactions' priority
	IF "!c1"
		IsEqual(%SkillTargetChar_$1,null)		
	THEN		
		SetPriority("CastOnCharacter_$1",%ActionScore_$1)
	ELSE
		SetPriority("CastOnCharacter_$1",0)
	ENDIF
	IF "!c1"
		IsEqual(%SkillTargetItem_$1,null)
	THEN
		SetPriority("CastOnItem_$1",%ActionScore_$1)
	ELSE
		SetPriority("CastOnItem_$1",0)
	ENDIF
	IF "!c1"
		IsEqual(%SkillTargetPos_$1,null)
	THEN
		SetPriority("CastOnPosition_$1",%ActionScore_$1)
	ELSE
		SetPriority("CastOnPosition_$1",0)
	ENDIF
	
	
	
EVENT SetFrequence_$1
ON
	OnTurn()
ACTIONS	
	IF "c1"
		IsLessThen(%frequencyStartAt_$1,%frequency_$1)
	THEN		
		Add(%frequencyStartAt_$1,1)
	ENDIF
	
	
	
BEHAVIOUR
REACTION WaitOnCast_$1,0
USAGE COMBAT
CHECK "(c1|!c2)&c3&!c4"
	IsEqual(%disableInCasual_$1,0)
	IsCasual()
	CharacterCanCast(__Me,$1,1)	
	CharacterCanCast(__Me,$1,0)	
ACTIONS
	CallFunction("StopEvaluateScore")
	Sleep(1)
	IF "!c1&c2"
		IsEqual(%SkillTargetChar_$1,null)
		CanSee(__Me,%SkillTargetChar_$1)
	THEN
		CharacterLookAt(%SkillTargetChar_$1)
	ELIF "!c1"
		IsEqual(%SkillTargetItem_$1,null)
	THEN
		CharacterLookAt(%SkillTargetItem_$1)
	ELIF "!c1"
		IsEqual(%SkillTargetPos_$1,null)
	THEN
		CharacterLookAt(%SkillTargetPos_$1)
	ENDIF
	IF "c1&c2"
		IsEqual(%displaySaveAPtext_$1,1)
		TranslatedStringKeyExists(%saveAPtext_$1)
	THEN
		DisplayCombatInfoText(__Me,%saveAPtext_$1,2)
	ELSE
		Sleep(1)
	ENDIF
	CharacterPlayEffect(__Me, "FX_GP_Status_SkipTurn_A_Icon", "Dummy_OverheadFX")
	CharacterEndTurn()	
INTERRUPT
	Reset()
	CallFunction("StartEvaluateScore")
	
	
	
REACTION CastOnCharacter_$1,0
USAGE COMBAT
VARS
	FIXEDSTRING:_Interrupt
	CHARACTER:_Target
	FLOAT3:_Pos
	FLOAT:_minRange
	FLOAT:_maxRange
	INT:_Immobile
CHECK "(c1|!c2)&!c3&c4&c5"
	IsEqual(%disableInCasual_$1,0)
	IsCasual()
	IsEqual(%SkillTargetChar_$1,null)
	CharacterCanCast(__Me,$1,0)	
	CharacterGetSkillRange(_minRange,_maxRange,__Me,$1)	
ACTIONS
	CallFunction("StopEvaluateScore")
	Set(%frequencyStartAt_$1,0)
	Set(_Target, %SkillTargetChar_$1)
	
	IF "c1&c2"
		//Redirect hostile casts to a taunter when possible.
		CharacterHasStatus(__Me, TAUNTED)
		CharacterIsEnemy(__Me, _Target)
	THEN
		IF "!c1"
			CharacterGetEnemy(_Target, __Me)
		THEN
			Set(_Target, %SkillTargetChar_$1)
		ENDIF
	ENDIF
	
	//StatusText(__Me, "AMER_ChainTwo")	//TEST
	
	IF "!c1"
		GetVar(_Immobile, __Me, "AMER_IAmImmobile")
	THEN
		//StatusText(__Me, "AMER_ExtraCrit")	//TEST
		
		/*
		GetPosition(_Target, _Pos)
		IF "c1"
			FindValidPosition(_Pos, _maxRange, __Me)
		THEN
			StatusText(__Me, "AMER_ExtraCrit")	//TEST
			CharacterMoveTo(_Pos, 1)
		ENDIF
		*/
		
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:CastOnCharacter_$1)
		CharacterMoveInRange(_Target, _minRange, _maxRange, 1)
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:null)
	ENDIF
	
	//StatusText(__Me, "AMER_ExtraCrit")	//TEST
	SetVar(__Me, "AMER_TimeoutDetection", INT:-6)	//Casting animations warrant extra time.
	CharacterUseSkill($1, _Target)
	Sleep(1.0)	//Prevent spell canceling.
	SetPriority("CastOnCharacter_$1",0)
INTERRUPT
ON
	OnMovementFailed(_)
ACTIONS
	//StatusText(__Me, "AMER_TEST_2")	//TEST
	SetVar(__Me, "AMER_TimeoutDetection", INT:0)	//Prevent timeout while deliberating.
	DelayReaction("CastOnCharacter_$1", 2)
INTERRUPT
	//OnManualInterrupt doesn't seem to work. Catch the manual
	//interupt behavior in this manner instead.
	IF "c1&!c2"
		GetVar(_Interrupt, __Me, "AMER_InterruptBehavior")
		IsEqual(_Interrupt, null)
	THEN
		//StatusText(__Me, "AMER_TEST_2")	//TEST
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:null)
		SetVar(__Me, "AMER_TimeoutDetection", INT:0)	//Prevent timeout while deliberating.
		DelayReaction("CastOnCharacter_$1", 2)
	ELSE
		Reset()
		//StatusText(__Me, "AMER_TEST_1")	//TEST
		CallFunction("StartEvaluateScore")
	ENDIF
	
	
	
REACTION CastOnItem_$1,0
USAGE COMBAT
VARS
	FIXEDSTRING:_Interrupt
	FLOAT3:_Pos
	FLOAT:_minRange
	FLOAT:_maxRange	
	INT:_Immobile
CHECK "(c1|!c2)&!c3&c4&c5"
	IsEqual(%disableInCasual_$1,0)
	IsCasual()
	IsEqual(%SkillTargetItem_$1,null)
	CharacterCanCast(__Me,$1,0)	
	CharacterGetSkillRange(_minRange,_maxRange,__Me,$1)	
ACTIONS
	CallFunction("StopEvaluateScore")
	Set(%frequencyStartAt_$1,0)
	
	IF "!c1"
		GetVar(_Immobile, __Me, "AMER_IAmImmobile")
	THEN
		//StatusText(__Me, "AMER_ExtraCrit")	//TEST
		
		/*
		GetPosition(%SkillTargetItem_$1, _Pos)
		IF "c1"
			FindValidPosition(_Pos, _maxRange, __Me)
		THEN
			CharacterMoveTo(_Pos, 1)
		ENDIF
		*/
		
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:CastOnItem_$1)
		CharacterMoveInRange(%SkillTargetItem_$1,_minRange,_maxRange,1)
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:null)
	ENDIF
	
	SetVar(__Me, "AMER_TimeoutDetection", INT:-6)	//Casting animations warrant extra time.
	CharacterUseSkill($1,%SkillTargetItem_$1)
	Sleep(1.0)	//Prevent spell canceling.
	SetPriority("CastOnItem_$1",0)	
INTERRUPT
ON
	OnMovementFailed(_)
ACTIONS
	SetVar(__Me, "AMER_TimeoutDetection", INT:0)	//Prevent timeout while deliberating.
	DelayReaction("CastOnItem_$1", 2)
INTERRUPT
	IF "c1&!c2"
		GetVar(_Interrupt, __Me, "AMER_InterruptBehavior")
		IsEqual(_Interrupt, null)
	THEN
		//StatusText(__Me, "AMER_TEST_2")	//TEST
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:null)
		SetVar(__Me, "AMER_TimeoutDetection", INT:0)	//Prevent timeout while deliberating.
		DelayReaction("CastOnItem_$1", 2)
	ELSE
		Reset()
		//StatusText(__Me, "AMER_TEST_1")	//TEST
		CallFunction("StartEvaluateScore")
	ENDIF
	
	
	
REACTION CastOnPosition_$1,0
USAGE COMBAT
VARS
	FIXEDSTRING:_Interrupt
	FLOAT3:_Pos
	FLOAT:_minRange
	FLOAT:_maxRange	
	INT:_Immobile
CHECK "(c1|!c2)&!c3&c4&c5"
	IsEqual(%disableInCasual_$1,0)
	IsCasual()
	IsEqual(%SkillTargetPos_$1,null)
	CharacterCanCast(__Me,$1,0)	
	CharacterGetSkillRange(_minRange,_maxRange,__Me,$1)	
ACTIONS
	CallFunction("StopEvaluateScore")
	Set(%frequencyStartAt_$1,0)
	
	IF "!c1"
		GetVar(_Immobile, __Me, "AMER_IAmImmobile")
	THEN
		//StatusText(__Me, "AMER_ExtraCrit")	//TEST
		
		/*
		Set(_Pos, %SkillTargetPos_$1)
		IF "c1"
			FindValidPosition(_Pos, _maxRange, __Me)
		THEN
			CharacterMoveTo(_Pos, 1)
		ENDIF
		*/
		
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:CastOnPosition_$1)
		CharacterMoveInRange(%SkillTargetPos_$1,_minRange,_maxRange,1)
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:null)
	ENDIF
	
	SetVar(__Me, "AMER_TimeoutDetection", INT:-6)	//Casting animations warrant extra time.
	CharacterUseSkill($1,%SkillTargetPos_$1)
	Sleep(1.0)	//Prevent spell canceling.
	SetPriority("CastOnPosition_$1",0)
INTERRUPT
ON
	OnMovementFailed(_)
ACTIONS
	SetVar(__Me, "AMER_TimeoutDetection", INT:0)	//Prevent timeout while deliberating.
	DelayReaction("CastOnPosition_$1", 2)
INTERRUPT
	IF "c1&!c2"
		GetVar(_Interrupt, __Me, "AMER_InterruptBehavior")
		IsEqual(_Interrupt, null)
	THEN
		//StatusText(__Me, "AMER_TEST_2")	//TEST
		SetVar(__Me, "AMER_InterruptBehavior", FIXEDSTRING:null)
		SetVar(__Me, "AMER_TimeoutDetection", INT:0)	//Prevent timeout while deliberating.
		DelayReaction("CastOnPosition_$1", 2)
	ELSE
		Reset()
		//StatusText(__Me, "AMER_TEST_1")	//TEST
		CallFunction("StartEvaluateScore")
	ENDIF
	
	
	
//===============================================//
//                                               //
//       B A S E   S K I L L   W R A P P E R     //
//                                               //
//===============================================//