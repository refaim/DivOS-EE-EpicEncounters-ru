#TEMPLATE "_SKILL_Base" : Target_FingerOfDeath
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_FingerOfDeath=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%AMER_SKILL_FingerOfDeath_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_FingerOfDeath
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_FingerOfDeath")
ACTIONS
	Set(%SkillTargetScore_Target_FingerOfDeath, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_Target_FingerOfDeath", Highest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_Target_FingerOfDeath, null)
	THEN
		Add(%ActionScore_Target_FingerOfDeath, %SkillTargetScore_Target_FingerOfDeath)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Target_FingerOfDeath
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_FingerOfDeath
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_SaveScore
	FLOAT:_Attribute
	FLOAT:_Level
	FLOAT:_Vitality
	INT:_SaveAmount
	ABILITY:_SaveType = BodyBuilding
	CHARACTERSTAT:_ResistType = ShadowResistance
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_FingerOfDeath")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						IF "!c1|!c2"
						    CharacterGetStat(_StatResistance, _Char, _ResistType)
						    IsGreaterThen(_StatResistance, %AMER_SKILL_FingerOfDeath_ResistanceLimit)
						THEN
							//Kill range calculation
							IF "c1"
								CharacterGetStat(_Vitality,  _Char, Vitality)
							THEN
								//Favor high vitality targets.
								Multiply(_Vitality, 2.0)
								Add(_Score, _Vitality)
							ENDIF
							
							//Unmapped Constitution calculation.
							IF "c1&c2"
								CharacterGetStat(_Attribute, _Char, Constitution)
								CharacterGetStat(_Level, _Char, Level)
							THEN
								IF "c1"
									CharacterHasTalent(_Char, LoneWolf)
								THEN
									Multiply(_Attribute, 1.25)
								ENDIF
								SetVar(__Me, "AMER_UnmapAttributeValue", _Attribute)
								SetVar(__Me, "AMER_UnmapAttributeLevel", _Level)
								CallFunction("AMER_UnmapAttribute")
								IF "c1"
									GetVar(_Attribute, __Me, "AMER_UnmapAttributeValue")
								THEN
									//Finger of Death has various effects at different unmapped
									//CON values; the AI tries to weigh these breakpoints accordingly.
									IF "!c1"
										IsGreaterThen(_Attribute, 3.0)
									THEN
										Multiply(_Attribute, -0.5)
									ELIF "!c1"
										IsGreaterThen(_Attribute, 5.0)
									THEN
										Multiply(_Attribute, -1.5)
									ELIF "c1"
										IsLessThen(_Attribute, 8.0)
									THEN
										Multiply(_Attribute, -2.5)
									ELSE
										Set(_Attribute, -25.0)
									ENDIF
									Add(_Attribute, 20.0)
									Add(_Score, _Attribute)
								ENDIF
							ENDIF
						
							//Resistance calculation
							Divide(_StatResistance, -100.0)
							Multiply(_StatResistance, 2.0)
							Add(_Score, _StatResistance)
							
							//Marked.
						    IF "c1"
								CharacterHasStatus(_Char, AGGRO_MARKED)
						    THEN
								Add(_Score, 1.0)
						    ENDIF
								
							//Summons are worth less.
							IF "c1"
								CharacterIsSummon(_Char)
							THEN
								Add(_Score, -5.0)
							ENDIF
							
							//Saving Throw score calculation
							IF "c1"
								CharacterGetAbility(_SaveAmount, _Char, _SaveType)
							THEN
								Cast(_SaveScore, _SaveAmount)
								Multiply(_SaveScore, -1.0)
								Add(_Score, _SaveScore)
							ENDIF
							
						    // Range score calculation
							IF "c1&c2"
							    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_FingerOfDeath)
							    GetDistance(_DistanceToChar, __Me, _Char)
							THEN
							    Set(_DistanceScore, _DistanceToChar)
							    IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
							    THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
							    ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
							    THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
							    ELSE 
									Set(_DistanceScore, 0.0)
							    ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
						    
						    // Can see score calculation
						    IF "!c1"
								CharacterCanSee(__Me, _Char)
						    THEN
								Add(_Score, -10.0)
						    ENDIF
						    
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_Target_FingerOfDeath)
							THEN
								Set(%SkillTargetChar_Target_FingerOfDeath, _Char)
								Set(%SkillTargetScore_Target_FingerOfDeath, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	