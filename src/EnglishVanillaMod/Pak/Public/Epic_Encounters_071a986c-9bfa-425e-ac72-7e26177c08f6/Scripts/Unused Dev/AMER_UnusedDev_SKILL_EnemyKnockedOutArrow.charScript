#TEMPLATE "_SKILL_Base" : Projectile_EnemyKnockedOutArrow
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Projectile_EnemyKnockedOutArrow=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%Projectile_EnemyKnockedOutArrow_ResistanceLimit = 90
FLOAT:%Projectile_EnemyKnockedOutArrow_MyInitiative
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Projectile_EnemyKnockedOutArrow
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Projectile_EnemyKnockedOutArrow")
ACTIONS
	Set(%SkillTargetScore_Projectile_EnemyKnockedOutArrow, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1"
		CharacterGetStat(%Projectile_EnemyKnockedOutArrow_MyInitiative, __Me, Initiative)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_Projectile_EnemyKnockedOutArrow", Random, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_Projectile_EnemyKnockedOutArrow, null)
		THEN
			Add(%ActionScore_Projectile_EnemyKnockedOutArrow, %SkillTargetScore_Projectile_EnemyKnockedOutArrow)
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Projectile_EnemyKnockedOutArrow
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Projectile_EnemyKnockedOutArrow
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	FLOAT:_TargetInit
	FLOAT:_SaveScore
	INT:_SaveAmount
	ABILITY:_SaveType = BodyBuilding
	CHARACTERSTAT:_ResistType = CrushingResistance
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Projectile_EnemyKnockedOutArrow")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)	//Don't attack charmed friends.
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						IF "!c1|!c2"
						    CharacterGetStat(_StatResistance, _Char, _ResistType)
						    IsGreaterThen(_StatResistance, %Projectile_EnemyKnockedOutArrow_ResistanceLimit)
						THEN
							//Kill range calculation
							IF "c1"
								CharacterGetStat(_Vitality,  _Char, Vitality)
							THEN
								//Favor low vitality targets.
								Multiply(_Vitality, -2.0)
								Add(_Score, _Vitality)
							ENDIF
							
							//Resistance calculation
							Divide(_StatResistance, -100.0)
							Multiply(_StatResistance, 5.0)
							Add(_Score, _StatResistance)
							
							//Already disabled/immune calculation.
							IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
								CharacterHasStatus(_Char, KNOCKED_DOWN)
								CharacterHasStatus(_Char, FROZEN)
								CharacterHasStatus(_Char, STUNNED)
								CharacterHasStatus(_Char, PETRIFIED)
								CharacterHasStatus(_Char, FEAR)
								CharacterHasStatus(_Char, CONSUME, AMER_STATUS_KnockedDownImmune1)
								CharacterHasStatus(_Char, CONSUME, AMER_STATUS_KnockedDownImmune2)
								CharacterHasStatus(_Char, CONSUME, AMER_STATUS_KnockedDownImmune3)
								CharacterHasTalent(_Char, StandYourGround)
							THEN
								Add(_Score, -6.0)
							ENDIF
							IF "c1|c2"
								CharacterHasStatus(_Char, BLIND)
								CharacterHasStatus(_Char, MUTED)
							THEN
								Add(_Score, -3.0)
							ENDIF
							
							//Marked.
							IF "c1"
								CharacterHasStatus(_Char, AGGRO_MARKED)
							THEN
								Add(_Score, 1.0)
							ENDIF
								
							//Summons are worth less.
							IF "c1"
								CharacterIsSummon(_Char)
							THEN
								Add(_Score, -5.0)
							ENDIF
								
							//Favor targets that haven't taken their turn yet.
							IF "c1"
								CharacterGetStat(_TargetInit, _Char, Initiative)
							THEN
								IF "c1"
									IsLessThen(_TargetInit, %Projectile_EnemyKnockedOutArrow_MyInitiative)
								THEN
									Add(_Score, 1.0)
								ENDIF
							ENDIF
								
							//Saving Throw score calculation
							IF "c1"
								CharacterGetAbility(_SaveAmount, _Char, _SaveType)
							THEN
								Cast(_SaveScore, _SaveAmount)
								Multiply(_SaveScore, -2.0)
								Add(_Score, _SaveScore)
							ENDIF
							
							// Range score calculation
							IF "c1&c2"
								CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_EnemyKnockedOutArrow)
								GetDistance(_DistanceToChar, __Me, _Char)
							THEN
								Set(_DistanceScore, _DistanceToChar)
								IF "(c1)"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
								THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
								ELIF "(c1)"
									IsLessThen(_DistanceScore, _SkillRangeMin)
								THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
								ELSE 
									Set(_DistanceScore, 0.0)
								ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
							
							// Can see score calculation
							IF "!c1"
								CharacterCanSee(__Me, _Char)
							THEN
								Add(_Score, -10.0)
							ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_Projectile_EnemyKnockedOutArrow)
							THEN
								Set(%SkillTargetChar_Projectile_EnemyKnockedOutArrow, _Char)
								Set(%SkillTargetScore_Projectile_EnemyKnockedOutArrow, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	