#TEMPLATE "_SKILL_Base" : Target_TargetedBless
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_TargetedBless=-1000000
// [GLOBAL_VARS]
EXTERN INT:%Target_TargetedBless_UseOnAllies = 1
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_TargetedBless
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_TargetedBless")
ACTIONS
	Set(%SkillTargetScore_Target_TargetedBless, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1"
		IsEqual(%Target_TargetedBless_UseOnAllies, INT:1)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_Target_TargetedBless", Highest, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_Target_TargetedBless, null)
		THEN
			Add(%ActionScore_Target_TargetedBless, %SkillTargetScore_Target_TargetedBless)
		ENDIF
	ELIF "!c1"
		CharacterHasStatus(__Me, BLESSED)
	THEN
		Set(%SkillTargetChar_Target_TargetedBless, __Me)
		Set(%ActionScore_Target_TargetedBless, 20.0)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should target
EVENT CalculateTarget_Target_TargetedBless
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_TargetedBless
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_SaveScore
	FLOAT:_Vitality
	FLOAT:_Level
	INT:_SaveAmount
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_TargetedBless")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "c1"
			CharacterIsAlly(__Me, _Char)
		THEN
			IF "!c1"
				CharacterIsSummon(_Char)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char CHARMED)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, BLESSED)
					THEN
						//Triage score calculation: Favor targets with
						//low vitality, try to stabilize/proc angel.
						IF "c1"
							CharacterGetStat(_Vitality, _Char, Vitality)
						THEN
							Multiply(_Vitality, -1.0)
							Add(_Vitality, 1.0)
							Multiply(_Vitality, 5.0)
							Add(_Score, _Vitality)
						ENDIF
						
						//Status calculation
						IF "c1"
							CharacterHasStatus(_Char, CURSED)
						THEN
							Add(_Score, 2.0)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, RAGED)
						THEN
							Add(_Score, 2.0)	//Rage reduces hit chance.
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, CONSUME, AMER_GreaterInvisibility)
						THEN
							Add(_Score, -2.0)	//Negative synergy since Invis gives 100% hit.
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, INVISIBLE)
						THEN
							Add(_Score, -1.0)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, MUTED)
						THEN
							Add(_Score, 1.0)	//Muted has to attack.
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, SLOWED)
						THEN
							Add(_Score, -1.0)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, CRIPPLED
						THEN
							Add(_Score, -1.5)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, WEAK)
						THEN
							Add(_Score, -1.5)
						ENDIF
							
							
						// Range score calculation
						IF "c1&c2"
							CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_TargetedBless)
							GetDistance(_DistanceToChar, __Me, _Char)
						THEN
							Set(_DistanceScore, _DistanceToChar)
							IF "c1"
								IsGreaterThen(_DistanceScore, _SkillRangeMax)
							THEN
								Subtract(_DistanceScore, _SkillRangeMax)
								Multiply(_DistanceScore, -1.0)
							ELIF "c1"
								IsLessThen(_DistanceScore, _SkillRangeMin)
							THEN
								Subtract(_DistanceScore, _SkillRangeMin)
								Multiply(_DistanceScore, 1.0)
							ELSE 
								Set(_DistanceScore, 0.0)
							ENDIF
							Add(_Score, _DistanceScore)
						ENDIF
							
						// Can see score calculation
						IF "!c1"
							CharacterCanSee(__Me, _Char)
						THEN
							Add(_Score, -10.0)
						ENDIF
						
						IF "c1"
							IsGreaterThen(_Score, %SkillTargetScore_Target_TargetedBless)
						THEN
							Set(%SkillTargetChar_Target_TargetedBless, _Char)
							Set(%SkillTargetScore_Target_TargetedBless, _Score)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	