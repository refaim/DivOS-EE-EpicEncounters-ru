//===============================================//
//                                               //
//   C H A R A C T E R   E X T E N S I O N S     //
//                                               //
//     Written by Matteo "Ameranth" T. (2017)    //
//===============================================//
#INCLUDE AMER_MAIN_SkillExtensions
#INCLUDE AMER_MAIN_CharacterMechanics
#INCLUDE AMER_MAIN_CharacterFunctions
#INCLUDE AMER_MAIN_CharacterItemFunctions
	
INIT
CHARACTER:__Me
	
//Used to pass a second character around for use with __Me
CHARACTER:%AMER_CharSource
	
//Used to track which damage type was taken, probably for use
//with Astrologer's Gaze.
DAMAGE:%AMER_DamageTakenType
		
//Used to track how much damage was taken.
FLOAT:%AMER_DamageTaken

//Used to prevent turn-based effects from being executed more
//than once when using the wait feature.
INT:%AMER_OncePerRound = 0
INT:%AMER_RoundCount = 0

//Used to handle the once per round choke timer being fired
//instantly when started because of the bug with starting
//timers from an OnTurn block.
INT:%AMER_OncePerRoundTimerChoke = 0

//Used to Track if the character may retaliate with Anticipate.
INT:%AMER_AnticipateRetaliation = 0

//Used to assign a random integer ID to each character when a
//combat starts. This ID can be compared against in place of
//the character GUID. Doing this allows very efficient storing/
//comparison of the int primitive.
INT:%AMER_CombatID = 0

//Used to determine whether or not this character should be
//removed from the game entirely when it is unloaded.
INT:%AMER_DestroyOnDeactivate = 0
	
USING AMER_MAIN_SkillExtensions
USING AMER_MAIN_CharacterMechanics
USING AMER_MAIN_CharacterFunctions
USING AMER_MAIN_CharacterItemFunctions
	
EVENTS
EVENT AMER_CharacterDeactivated
ON
	OnDeactivate()
ACTIONS
	IF "c1"
		IsEqual(%AMER_DestroyOnDeactivate, 1)
	THEN
		CharacterSetOffStage()
	ENDIF
	
	
	
EVENT DamageTaken
//=========================//
//         Damaged:        //
//=========================//
VARS
	CHARACTER:_CharSource
	DAMAGE:_Type
	FLOAT:_Damage
	FLOAT:_Vitality
	INT:_IsShotgun
	INT:_IsExecute
ON
	OnDamage(_Type, _Damage, _CharSource, _)
ACTIONS
	//Every time a character takes damage, this is run. To reduce system strain, I try to keep the
	//average conditionals executed to a minimum within here. This is why some of the following
	//logic has single conditionals within single conditionals rather than one complex conditional.
	IF "c1"
		IsGreaterThen(_Damage, 0.00)
		//IsEqual(_Damage, 0)		//Did attack miss or get blocked?
	THEN
		//================================//
		//            Fossilize:          //
		//================================//
		IF "c1"
			IsGreaterThen(%AMER_FossilizeAbsorb, 0.00)
		THEN
			Set(%AMER_DamageTaken, _Damage)
			Set(%AMER_DamageTakenType, _Type)
			CallFunction("AMER_FossilizeUpdateAbsorb")
		ENDIF
		
		//================================//
		//          Vitality Link:        //
		//================================//
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, "AMER_VitalityLink")
		THEN
			Set(%AMER_DamageTaken, _Damage)
			CallFunction("AMER_VitalityLinkSplitDamage")
		ENDIF
		
		IF "!c1"
			IsEqual(_CharSource, null)	//Only damage with a character source
		THEN
			Set(%AMER_CharSource, _CharSource)
			
			//================================//
			// Attack of Opportunity Bonuses: //
			//================================//
			IF "c1"
				IsEqual(_CharSource, %AMER_OpportunityAttackingChar)
			THEN
				CallFunction("AMER_OpportunityBonuses")
			ENDIF
			
			//================================//
			//       Limit shotgunning:       //
			//================================//
			IF "c1"
				GetVar(_IsShotgun, _CharSource, "AMER_IsCastingShotgun")
			THEN
				IF "c1"
					IsEqual(_IsShotgun, INT:1)
				THEN
					//Set(%AMER_CharSource, _CharSource)
					Set(%AMER_DamageTaken, _Damage)
					Set(%AMER_DamageTakenType, _Type)
					CallFunction("AMER_LimitShotgunning")
				ENDIF
			ENDIF
			
			//================================//
			//       Astrologer's Gaze:       //
			//================================//
			IF "c1"
				CharacterHasTalent(_CharSource, FaroutDude)
			THEN
				IF "!c1"
					CharacterIsAlly(_CharSource, __Me)
				THEN
					Set(%AMER_DamageTakenType, _Type)
					//Set(%AMER_CharSource, _CharSource)
					CallFunction("AMER_AstroGaze")
				ENDIF
			ENDIF
			
			//================================//
			//             Execute:           //
			//================================//
			IF "c1"
				GetVar(_IsExecute, _CharSource, "AMER_ExecuteCasted")
			THEN
				IF "c1"
					IsEqual(_IsExecute, INT:1)
				THEN
					IF "!c1"
						CharacterIsBoss(__Me)
					THEN
						//Only start the detector timer once per execute.
						IF "c1"
							IsEqual(%AMER_ExecuteDamage, INT:0)
						THEN
							StartTimer("AMER_ExecuteKillDetect", 3.5, 0)
						ENDIF
						Add(%AMER_ExecuteDamage, _Damage)
					ENDIF
				ENDIF
			ENDIF
			
			//================================//
			//       Vampirism Affixes:       //
			//================================//
			IF "c1"
				CharacterHasStatus(__Me, CONSUME, SharedVampirism)
			THEN
				//Only functions if at more than 1 vitality to prevent
				//cheese with Indomitable.
				IF "c1&c2"
					CharacterGetStat(_Vitality, _CharSource, VitalityPoints)
					IsGreaterThen(_Vitality, 1.0)
				THEN
					CharacterHeal(_CharSource, 0.02)
				ENDIF
			ENDIF
			IF "c1"
				CharacterHasStatus(_CharSource, CONSUME, MassVampirism)
			THEN
				//Only functions while in the active turn to prevent
				//cheese with Shackles of Pain/reflect.
				IF "c1"
					CharacterIsInActiveTurn(_CharSource)
				THEN
					CharacterHeal(_CharSource, 0.03)
				ENDIF
			ENDIF
			
			//================================//
			//           Anticipate:          //
			//================================//
			IF "c1"
				IsEqual(%AMER_AnticipateRetaliation, 1)
			THEN
				IF "c1"
					CharacterHasStatus(__Me, CONSUME, AMER_Anticipate)
				THEN
					IF "c1"
						CharacterIsEnemy(__Me, _CharSource)
					THEN
						CallFunction("AMER_AnticipateAttack")
					ENDIF
				ELSE
					Set(%AMER_AnticipateRetaliation, INT:0)
				ENDIF
			ENDIF
			
			//================================//
			//     Type-Specific Routines:    //
			//================================//
			IF "c1"
				IsEqual(_Type, Water)
			THEN
				CallFunction("AMER_WaterVulnerabilityProc")
			ELIF "c1"
				IsEqual(_Type, Fire)
			THEN
				CallFunction("AMER_FireVulnerabilityProc")
			ELIF "c1"
				IsEqual(_Type, Air)
			THEN
				CallFunction("AMER_AirVulnerabilityProc")
			ELIF "c1"
				IsEqual(_Type, Earth)
			THEN
				CallFunction("AMER_EarthVulnerabilityProc")
			ELIF "c1"
				IsEqual(_Type, Poison)
			THEN
				CallFunction("AMER_PoisonVulnerabilityProc")
				//================================//
				//           Alchemist:           //
				//================================//
				IF "c1"
					CharacterHasTalent(_CharSource, WarriorLoreGrenadeRange)
				THEN
					IF "!c1"
						CharacterIsAlly(_CharSource, __Me)
					THEN
						CallFunction("AMER_AlchemistTalentEffects")
					ENDIF
				ENDIF
			ELIF "c1"
				IsEqual(_Type, Shadow)
			THEN
				CallFunction("AMER_ShadowVulnerabilityProc")
				//================================//
				//           Occultist:           //
				//================================//
				IF "c1"
					CharacterHasTalent(_CharSource, GoldenMage)
				THEN
					IF "!c1"
						CharacterIsAlly(_CharSource, __Me)
					THEN
						CallFunction("AMER_OccultistTalentEffects")
					ENDIF
				ENDIF
			ELIF "c1"
				IsEqual(_Type, Piercing)
			THEN
				CallFunction("AMER_PiercingVulnerabilityProc")
				//================================//
				//             Cruelty:           //
				//================================//
				IF "c1"
					CharacterHasStatus(_CharSource, CONSUME, "AMER_Cruelty")
				THEN
					CallFunction("AMER_CrueltyArmorReduction")
				ENDIF
				//================================//
				//       Chain on striking:       //
				//================================//
				IF "c1"
					CharacterHasWeaponType(_CharSource, SmallWeapons, 1)	//Chain requires an equipped dagger.
				THEN
					IF "c1"
						CharacterIsInActiveTurn(_CharSource)	//Only add Chain if it's source's turn in combat.
					THEN
						CallFunction("AMER_AddChain")
					ENDIF
				ENDIF
			ELIF "c1"
				IsEqual(_Type, Crushing)
			THEN
				//================================//
				//            Anaconda:           //
				//================================//
				IF "c1"
					CharacterHasTalent(_CharSource, SpillNoBlood)
				THEN
					IF "!c1"
						CharacterIsAlly(_CharSource, __Me)
					THEN
						CallFunction("AMER_AnacondaInitiative")
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	
	
	
EVENT IMissAttack
//=========================//
//   I Missed an Attack:   //
//=========================//
VARS
//=============================//
	FIXEDSTRING:_Stop = "STOP"
	FIXEDSTRING:_Text = "AMER_CenturionText"
//=============================//
	CHARACTER:_CharTarget
	CHARACTER:_ExistingAoO
	INT:_Chain
	FLOAT:_WeaponRange
	FLOAT:_Distance
ON
	OnMiss(__Me, _, _CharTarget, _)
ACTIONS
	
	//Subtract Chain Bonus if missing an attack
	Set(_Chain, %AMER_Chain)
	IF "!c1"
		IsEqual(_Chain, INT:0)
	THEN
		Subtract(_Chain, INT:2)
		IF "c1"
			IsLessThen(_Chain, INT:0)
		THEN
			Set(_Chain , INT:0)
		ENDIF
		
		Set(%AMER_Chain, _Chain)
		CallFunction("AMER_SetChain")
	ENDIF
	
	//Support Centurion
	IF "c1"
		CharacterHasTalent(_CharTarget, Flanking)
	THEN
		IF "!c1"
			CharacterIsInActiveTurn(_CharTarget)
		THEN
			IF "!c1&!c2&!c3&!c4"
				CharacterHasWeaponType(_CharTarget, Wands, 1)
				CharacterHasWeaponType(_CharTarget, Bow, 1)
				CharacterHasWeaponType(_CharTarget, CrossBow, 1)
				CharacterHasStatus(_CharTarget, FEAR)
			THEN
				IF "c1&c2&(!c3|!c4)&c5&c6&c7"
					CharacterGetWeaponRange(_, _WeaponRange, _CharTarget)
					GetInnerDistance(_Distance, _CharTarget, __Me)
					IsLessThen(_WeaponRange, _Distance)
					IsLessThen(FLOAT:3, _Distance)		//Some one-handers have silly-small range.
					CanSee(_CharTarget, __Me)
					GetVar(_ExistingAoO, _CharTarget, "AMER_FreeAttackTarget")	//If there is already an attack of opportunity happening,
					IsEqual(_ExistingAoO, null)									//Don't do anything because it won't work anyway.
				THEN
					IF "c1"
						CharacterIsEnemy(_CharTarget, __Me)
					THEN
						CharacterEvent(_CharTarget, "AMER_CenturionHook")	//Reset attacker behavior hook
						SetVar(_CharTarget, "AMER_PlayAnimation", _Stop)
						SetVar(_CharTarget, "AMER_FreeAttackTarget", __Me)
						SetVar(_CharTarget, "AMER_FreeAttackText", _Text)
						//_CharTarget is the Centurion, so initalize opportunity bonus vars for
						//__Me, as I am about to be retaliated upon. Temporary status of opportunity
						//bonus damage applies to _CharTarget for the same reason.
						Set(%AMER_OpportunityAttackingChar, _CharTarget)
						CharacterEvent(__Me, "AMER_ResetOpportunityHook")
						AddTemporaryStatusInfluence(_CharTarget, CONSUME, 1, "AMER_AttackOfOpportunityDamage", 0)
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	
	//Support Charisma
	Set(%AMER_CharismaReactionIndex, INT:0)			//Index for Hit buff
	CallFunction("AMER_InitializeBardicReaction")
	
	
EVENT TargetBlockAttack
//==========================//
// Target Blocked my Attack //
//==========================//
VARS
//=============================//
	FIXEDSTRING:_Stop = "STOP"
	FIXEDSTRING:_Text = "AMER_CenturionText"
//=============================//
	CHARACTER:_CharTarget
	CHARACTER:_ExistingAoO
	FLOAT:_Range
	FLOAT:_WeaponRange
	FLOAT:_Distance
ON
	OnBlock(__Me, _, _CharTarget, _)
ACTIONS
	//Support Centurion
	IF "c1"
		CharacterHasTalent(_CharTarget, Flanking)
	THEN
		IF "!c1"
			CharacterIsInActiveTurn(_CharTarget)
		THEN
			IF "!c1&!c2&!c3&!c4"
				CharacterHasWeaponType(_CharTarget, Wands, 1)
				CharacterHasWeaponType(_CharTarget, Bow, 1)
				CharacterHasWeaponType(_CharTarget, CrossBow, 1)
				CharacterHasStatus(_CharTarget, FEAR)
			THEN
				IF "c1&c2&(!c3|!c4)&c5&c6&c7"
					CharacterGetWeaponRange(_, _WeaponRange, _CharTarget)
					GetInnerDistance(_Distance, _CharTarget, __Me)
					IsLessThen(_WeaponRange, _Distance)
					IsLessThen(FLOAT:3, _Distance)		//Some one-handers have silly-small range.
					CanSee(_CharTarget, __Me)
					GetVar(_ExistingAoO, _CharTarget, "AMER_FreeAttackTarget")	//If there is already an attack of opportunity happening,
					IsEqual(_ExistingAoO, null)									//Don't do anything because it won't work anyway.
				THEN
					IF "c1"
						CharacterIsEnemy(_CharTarget, __Me)
					THEN
						CharacterEvent(_CharTarget, "AMER_CenturionHook")	//Reset attacker behavior hook
						SetVar(_CharTarget, "AMER_PlayAnimation", _Stop)
						SetVar(_CharTarget, "AMER_FreeAttackTarget", __Me)
						SetVar(_CharTarget, "AMER_FreeAttackText", _Text)
						//_CharTarget is the Centurion, so initalize opportunity bonus vars for
						//__Me, as I am about to be retaliated upon. Temporary status of opportunity
						//bonus damage applies to _CharTarget for the same reason.
						Set(%AMER_OpportunityAttackingChar, _CharTarget)
						CharacterEvent(__Me, "AMER_ResetOpportunityHook")
						AddTemporaryStatusInfluence(_CharTarget, CONSUME, 1, "AMER_AttackOfOpportunityDamage", 0)
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	
	//Support Charisma
	Set(%AMER_CharismaTargetOverride, _CharTarget)	//We need the blocker, not the attacker.
	Set(%AMER_CharismaReactionIndex, INT:9)			//Index for Block reaction
	CallFunction("AMER_InitializeBardicReaction")
	Set(%AMER_CharismaTargetOverride, null)
	
	
	
EVENT CriticalStrike
//=========================//
//Critical Strike/Backstab://
//=========================//
VARS
	CHARACTER:_CharTarget
ON
	OnCriticalHit(__Me,_,_CharTarget,_)
ACTIONS
	IF "c1"
		CharacterHasTalent(__Me, "RogueLoreDaggerBackStab")
	THEN
		IF "c1"
			CharacterHasWeaponType(__Me, SmallWeapons, 1)
		THEN
			IF "c1"
				IsEqual(%AMER_BackstabChoke, INT:0)
			THEN
				Set(%AMER_CritTarget, _CharTarget)
				CallFunction("AMER_BackstabDamageBonus")
			ENDIF
		ELSE
			StatusText(_CharTarget, "AMER_CriticalHit")
		ENDIF
	ELSE
		StatusText(_CharTarget, "AMER_CriticalHit")
	ENDIF
	//Support Charisma
	Set(%AMER_CharismaReactionIndex, INT:12)	//Index for Miss debuff
	CallFunction("AMER_InitializeBardicReaction")
	
	
	
EVENT OnOpportunity
//=========================//
//  Attack of Opportunity: //
//=========================//
VARS
	CHARACTER:_CharTarget
ON
	OnAttackOfOpportunity(_CharTarget)
ACTIONS
	SetVar(_CharTarget, "AMER_OpportunityAttackingChar", __Me)
	CharacterEvent(_CharTarget, "AMER_ResetOpportunityHook")
	
	
	
EVENT ConsumeApplied
//=========================//
//   Consume is Applied:   //
//=========================//
ON
	OnCharacterStatus(__Me, CONSUME)
ACTIONS
	IF "!c1"
		IsEqual(%AMER_ExpectApplicator, INT:0)
	THEN
		Subtract(%AMER_ExpectApplicator, INT:1)
		IF "c1"
			IsEqual(%AMER_ApplicatorIsStatus, INT:1)
		THEN
			//Check for fake status application
			CallFunction("AMER_STATUS_FakeStatuses")
		ELSE
			//Check for dummy consume application
			CallFunction("AMER_SkillTriggers")
		ENDIF
	ENDIF
	
	
	
EVENT AMEROnDying
//=========================//
//          I Die:         //
//=========================//
ON
	OnDie(__Me, _, _, _)
ACTIONS
	//Reset chain counter when dying
	IF "!c1"
		IsEqual(%AMER_Chain, INT:0)
	THEN
		Set(%AMER_Chain, INT:0)
		CallFunction("AMER_SetChain")
	ENDIF
	
	
	
EVENT ScalingDelay
ON
	OnTimer("AMER_ScalingDelay")
ACTIONS
	CallFunction("AMER_ScaleNonGlobal")
	
	
	
//=========================//
//    Status is Lost:      //
//=========================//
EVENT VoidAuraLost
ON
	OnCharacterStatusRemoved(__Me, VOID_AURA)
ACTIONS
	//Void Aura prevents consumes, so scale when it is lost.
	//The timer is used to delay the function until the
	//Void Aura is *actually* gone.
	StartTimer("AMER_ScalingDelay", 0.5, 0)
	
EVENT CharmedLost
ON
	OnCharacterStatusRemoved(__Me, CHARMED)
ACTIONS
	//Apply raged when charm is lost.
	CharacterApplyStatus(__Me, RAGED)
	
EVENT InvisibilityLost
ON
	OnCharacterStatusRemoved(__Me, INVISIBLE)
ACTIONS
	//Support Charisma
	IF "!c1"
		CharacterIsInActiveTurn(__Me)
	THEN
		Set(%AMER_CharismaReactionIndex, INT:8)	//Index for invis reapply reaction
		CallFunction("AMER_InitializeBardicReaction")
	ENDIF
	
EVENT SneakingLost
ON
	OnCharacterStatusRemoved(__Me, SNEAKING)
ACTIONS
	//Support Charisma
	IF "!c1"
		CharacterIsInActiveTurn(__Me)
	THEN
		Set(%AMER_CharismaReactionIndex, INT:8)	//Index for invis reapply reaction
		CallFunction("AMER_InitializeBardicReaction")
	ENDIF
	
EVENT PoisonedLost
ON
	OnCharacterStatusRemoved(__Me, POISONED)
ACTIONS
	//A timer is used here to prevent removing Untreated Poison
	//on Poisoned reapplication.
	StopTimer("AMER_RemoveUntreatedPoison")
	StartTimer("AMER_RemoveUntreatedPoison", 0.5, 0)
	
EVENT RemoveUntreatedPoison
ON
	OnTimer("AMER_RemoveUntreatedPoison")
ACTIONS
	IF "!c1"
		CharacterHasStatus(__Me, POISONED) 
	THEN
		//Support removing Untreated Poison
		CharacterConsume(__Me, "AMER_STATUS_RemoveUntreatedPoison")
	ENDIF
	
	
	
	
//=========================//
//   Status is Applied:    //
//=========================//
EVENT BlindApplied
//Character becomes blind
ON
	OnCharacterStatus(__Me, BLIND)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckPredator")
	
EVENT CrippledApplied
//Character becomes crippled
ON
	OnCharacterStatus(__Me, CRIPPLED)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckPredator")
	
EVENT KnockDownApplied
//Character becomes knocked down
ON
	OnCharacterStatus(__Me, KNOCKED_DOWN)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckPredator")
	
	IF "c1"
		IsInSurface(__Me, Ice)
	THEN
		Set(%AMER_CharismaReactionIndex, INT:7	//Index for Slip reaction
		CallFunction("AMER_InitializeBardicReaction")
	ENDIF
	CallFunction("AMER_BolsterRemoval")
	
EVENT FearApplied
//Character becomes feared
ON
	OnCharacterStatus(__Me, FEAR)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckPredator")
	Set(%AMER_CharismaReactionIndex, INT:5	//Index for Fear reaction
	CallFunction("AMER_InitializeBardicReaction")
	CallFunction("AMER_BolsterRemoval")
	
EVENT StunnedApplied
//Character becomes stunned
ON
	OnCharacterStatus(__Me, STUNNED)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckPredator")
	Set(%AMER_CharismaReactionIndex, INT:1)	//Index for Stunned reaction
	CallFunction("AMER_InitializeBardicReaction")
	CallFunction("AMER_BolsterRemoval")
	
EVENT FrozenApplied
//Character becomes frozen
ON
	OnCharacterStatus(__Me, FROZEN)
ACTIONS
	Set(%AMER_CharismaReactionIndex, INT:2)	//Index for Frozen reaction
	CallFunction("AMER_InitializeBardicReaction")
	CallFunction("AMER_BolsterRemoval")
	
EVENT BurnApplied
//Character becomes burning
ON
	OnCharacterStatus(__Me, BURNING)
ACTIONS
	Set(%AMER_CharismaReactionIndex, INT:3)	//Index for Burning reaction
	CallFunction("AMER_InitializeBardicReaction")
	
EVENT PetrifyApplied
//Character becomes petrified
ON
	OnCharacterStatus(__Me, PETRIFIED)
ACTIONS
	Set(%AMER_CharismaReactionIndex, INT:4)	//Index for Petrified reaction
	CallFunction("AMER_InitializeBardicReaction")
	CallFunction("AMER_BolsterRemoval")
	
EVENT SlowApplied
//Character becomes slowed
ON
	OnCharacterStatus(__Me, SLOWED)
ACTIONS
	Set(%AMER_CharismaReactionIndex, INT:6)	//Index for Slowed reaction
	CharacterEvent(__Me, "AMER_CheckDemon")
	CallFunction("AMER_InitializeBardicReaction")
	
EVENT HasteApplied
//Character becomes hastened
ON
	OnCharacterStatus(__Me, HASTED)
ACTIONS
	Set(%AMER_CharismaReactionIndex, INT:11)	//Index for Haste reaction
	CallFunction("AMER_InitializeBardicReaction")
	CallFunction("AMER_CheckAngelInitial")
	
EVENT CursedApplied
//Character becomes cursed
ON
	OnCharacterStatus(__Me, CURSED)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckDemon")
	
EVENT WeakApplied
//Character becomes weak
ON
	OnCharacterStatus(__Me, WEAK)
ACTIONS
	CharacterEvent(__Me, "AMER_CheckDemon")
	
EVENT BlessApplied
//Character becomes blessed
ON
	OnCharacterStatus(__Me, BLESSED)
ACTIONS
	CallFunction("AMER_CheckAngelInitial")
	
EVENT FortifiedApplied
//Character becomes fortified
ON
	OnCharacterStatus(__Me, FORTIFIED)
ACTIONS
	CallFunction("AMER_CheckAngelInitial")
	
EVENT CharmApplied
//Character becomes charmed
ON
	OnCharacterStatus(__Me, CHARMED)
ACTIONS
	Set(%AMER_CharismaReactionIndex, INT:10)	//Index for Charmed reaction
	CallFunction("AMER_InitializeBardicReaction")
	CallFunction("AMER_BolsterRemoval")
	
	
	
EVENT TurnBased	
//=========================//
//   Beginning of Turn:    //
//=========================//
VARS
	INT:_Round
ON
	OnTurn()	
ACTIONS
	//v1.1.9 using a new solution for round detection. If %AMER_RoundCount
	//is not equal to the current round, then we are in the first turn
	//of the round. If it is, then the wait function is detected. If
	//%AMER_RoundCount is not equal to the round number after incrementing,
	//something went wrong and the round number should be rediscovered.
	IF "!c1"
		IsRound(%AMER_RoundCount)
	THEN
		CallFunction("AMER_OncePerRoundFunctions")
		Add(%AMER_RoundCount, INT:1)
		IF "!c1"
			IsRound(%AMER_RoundCount)
		THEN
			CallFunction("AMER_GetRoundNumber")
		ENDIF
	ENDIF
	
	//Support Hyperacute checking for hidden enemies
	IF "c1"
		CharacterHasTalent(__Me, LightStep)
	THEN
		IF "!c1"
			CharacterIsDead(__Me)
		THEN
			IterateCharactersInCombat(__Me, "AMER_DetectInvis")
		ENDIF
	ENDIF
	
	//Reset chain per turn counter.
	Set(%AMER_ChainThisTurn, INT:0)
	IF "!c1"
		IsEqual(%AMER_Chain, INT:0)
	THEN
		IF "!c1&!c2"
			CharacterHasStatus(__Me, INVISIBLE)
			CharacterHasStatus(__Me, SNEAKING)
		THEN
			IF "!c1&!c2"
				CharacterHasStatus(__Me, CONSUME, "AMER_GreaterInvisibility")
				CharacterHasStatus(__Me, CONSUME, "AMER_Blur")
			THEN
				IF "!c1"
					CharacterHasStatus(__Me, CONSUME, "AMER_UNI_Discipline")
				THEN
					Set(%AMER_Chain, INT:0)
					CallFunction("AMER_SetChain")		// Reset chain counter if visible at turn start
				ENDIF
			ENDIF
		ENDIF
	ENDIF
				
	//Broadcast status upkeep event.
	//The function checks %AMER_OncePerRound so statuses
	//are only updated once per round, but the event is
	//called every turn, even on waits, because this event
	//is how characters update which character is in the
	//active turn.
	CharacterEvent(__Me, "AMER_UpkeepStatuses")
	
	
	
EVENT OncePerRoundFunctions
VARS
	INT:_OverchargeCount
	INT:_OverchargeUsed
	INT:_Ability
	STRING:_Str
	FIXEDSTRING:_WhichEffect
ON
	OnFunction("AMER_OncePerRoundFunctions")
ACTIONS
	Set(%AMER_OncePerRound, INT:1)
				
	//Skill upkeep
	CallFunction("AMER_SkillOnTurn")
		
	//Recover Reactions
	CallFunction("AMER_ReactionRecovery")
	
	//Lucky Charm
	IF "c1&c2"
		CharacterGetAbility(_Ability, __Me, Luck)
		IsGreaterThen(_Ability, INT:0)
	THEN
		CallFunction("AMER_LuckyCharm")
	ENDIF
		
	//Poisoned Check
	IF "c1"
		CharacterHasStatus(__Me, POISONED)
	THEN
		IF "!c1"
			CharacterHasTalent(__Me, Zombie)
		THEN
			CallFunction("AMER_PoisonedResPenalty")
		ENDIF
	ENDIF
	
	//Regain Alchemist charges.
	IF "c1"
		CharacterHasTalent(__Me, WarriorLoreGrenadeRange)
	THEN
		IF "c1"
			CharacterGetAbility(_Ability, __Me, Crafting)
		THEN
			//Crafting of 9 or higher gives 3 per round.
			IF "c1"
				IsGreaterThen(_Ability, INT:8)
			THEN
				Set(%AMER_AlchemistCharges, INT:3)
			ELSE
				Set(%AMER_AlchemistCharges, INT:1)
			ENDIF
		ENDIF
	ENDIF
	
	//Overcharge maintenance for players.
	IF "c1"
		CharacterIsPlayer(__Me)
	THEN
		IF "c1&c2"
			GetVar(_OverchargeCount, __Me, "AMER_OverchargeCount")
			IsGreaterThen(_OverchargeCount, INT:0)
		THEN
			IF "c1&c2"
				GetVar(_OverchargeUsed, __Me, "AMER_OverchargeUsed")
				IsEqual(_OverchargeUsed, INT:0)
			THEN
				//Remove the old Overcharge buff.
				Print(_Str, "AMER_Overcharge[1]", _OverchargeCount)
				Cast(_WhichEffect, _Str)
				RemoveStatusInfluence(__Me, CONSUME, 1, _WhichEffect, 0)
						
				Subtract(_OverchargeCount, INT:1)
				SetVar(__Me, "AMER_OverchargeCount", _OverchargeCount)
						
				IF "c1"
					IsGreaterThen(_OverchargeCount, INT:0)
				THEN
					//Add the new Overcharge buff if _OverchargeCount > 0.
					Print(_Str, "AMER_Overcharge[1]", _OverchargeCount)
					Cast(_WhichEffect, _Str)
					AddStatusInfluence(__Me, CONSUME, 1, _WhichEffect, 0)
				ENDIF
			ELSE
				SetVar(__Me, "AMER_OverchargeUsed", INT:0)
			ENDIF
		ENDIF
	ENDIF
	
	
	
EVENT EndTurnBased	
//=========================//
//       End of Turn:      //
//=========================//
VARS
	INT:_OverchargeCount
	INT:_OverchargeUsed
	STRING:_Str
	FIXEDSTRING:_WhichEffect
ON
	OnTurnEnded()	
ACTIONS
	//Disabled characters can't wait, so disable immunity
	//system doesn't need to be wait-protected. Players
	//no longer benefit from this system.
	IF "!c1"
		CharacterIsPlayer(__Me)
	THEN
		CallFunction("AMER_LimitHardDisables")
	ENDIF
	
	//Support Hyperacute check for hidden enemies
	IF "c1"
		CharacterHasTalent(__Me, LightStep)
	THEN
		IterateCharactersInCombat(__Me, "AMER_DetectInvis")
	ENDIF
	
	//Make sure that a character with Greater Invisibility ends
	//their turn invisible.
	IF "c1"
		CharacterHasStatus(__Me, CONSUME, "AMER_GreaterInvisibility")
	THEN
		IF "!c1"
			CharacterHasStatus(__Me, INVISIBLE)
		THEN
			CharacterApplyStatus(__Me, INVISIBLE, 2)
		ENDIF
	ENDIF
	
	Set(%AMER_OncePerRound, INT:0)
	
	
	
EVENT CombatBegins	
//=========================//
//   Beginning of Combat:  //
//=========================//
VARS
	INT:_Ability
	INT:_Count
	FLOAT:_Level
ON
	OnCombatStarted()	
ACTIONS
	//Randomly assign a combat ID.
	GetRandomBetween(%AMER_CombatID, 0, 9999999)
	
	//v1.1.9 using a new solution for round detection.
	//Find which round combat is in when combat starts.
	CallFunction("AMER_GetRoundNumber")
	
	IF "!c1"
		IsRound(%AMER_RoundCount)
	THEN
		Add(%AMER_RoundCount, INT:1)
	ENDIF
	
	//Reset chain counter when starting combat
	IF "!c1"
		IsEqual(%AMER_Chain, INT:0)
	THEN
		Set(%AMER_Chain, INT:0)
		CallFunction("AMER_SetChain")
	ENDIF
	
	IF "!c1"
		CharacterIsPlayer(__Me)
	THEN
		IF "c1&!c2"
			GetVar(_Level, __Me, "AMER_ScalingMyLevel")
			IsGreaterThen(_Level, 0.0)
		THEN
			IF "c1"
				CharacterGetStat(_Level, __Me, Level)
			THEN
				SetVar(__Me, "AMER_ScalingMyLevel", _Level)
			ENDIF
		ENDIF
		//CallFunction("AMER_ScaleNonGlobal")
		//Scale after a short delay because some creatures enter combat
		//neutral/friendly and promptly become hostile.
		StartTimer("AMER_ScaleNonGlobal", 0.7, 0)
	ENDIF
	
	//Adaptive allows the character to start combat with reactions stored.
	IF "c1"
		CharacterHasTalent(__Me, WeatherProof)
	THEN
		IF "c1"
			CharacterHasTalent(__Me, RangerLoreEvasionBonus)
		THEN
			Set(%AMER_PredatorShots, INT:2) //Predator
		ENDIF
		
		IF "c1"
			CharacterHasTalent(__Me, Demon)
		THEN
			Set(%AMER_DemonReactions, INT:2) //Demon
		ENDIF
		
		IF "c1"
			CharacterHasTalent(__Me, IceKing)
		THEN
			Set(%AMER_AngelReactions, INT:2) //Angel
		ENDIF
		
		IF "c1&c2"
			CharacterGetAbility(_Ability, __Me, Charisma)
			IsGreaterThen(_Ability, INT:0)
		THEN
			Set(%AMER_CharismaReactions, INT:2) //Charisma
		ENDIF
	ENDIF
	
	//Make certain that this value always starts at zero.
	Set(%AMER_OncePerRoundTimerChoke, INT:0)
	
	
	
EVENT CombatEnds	
//=========================//
//	    End of Combat:     //
//=========================//
ON
	OnCombatEnded()
ACTIONS
	IF "c1"
		CharacterIsDead(__Me)
	THEN
		//Player summons count as players, but we always want to remove them.
		IF "!c1&(!c2|c3)"
			CharacterIsBoss(__Me)
			CharacterIsPlayer(__Me)
			CharacterIsSummon(__Me)
		THEN
			//Don't remove allied NPCs because some of them are used after death.
			//We always remove summons.
			IF "(c1&!c2)|(c3&c4)|c5"
				CharacterIsEnemy(__Me, Player1_dac1443f-a866-4ab3-b240-e705c0b20ec5)
				CharacterHasStatus(Player1_dac1443f-a866-4ab3-b240-e705c0b20ec5 CHARMED)
				CharacterIsAlly(__Me, Player1_dac1443f-a866-4ab3-b240-e705c0b20ec5)
				CharacterHasStatus(Player1_dac1443f-a866-4ab3-b240-e705c0b20ec5 CHARMED)
				CharacterIsSummon(__Me)
			THEN
				Set(%AMER_DestroyOnDeactivate, 1)
			ENDIF
		ENDIF
	ELSE
		//Reset chain counter when leaving combat
		IF "!c1"
			IsEqual(%AMER_Chain, INT:0)
		THEN
			Set(%AMER_Chain, INT:0)
			CallFunction("AMER_SetChain")
		ENDIF
		
		//Become visible if hidden from a player's Blindness.
		IF "c1"
			IsEqual(%AMER_InvisibleFromBlind, INT:1)
		THEN
			SetVisible(__Me, INT:1)
			Set(%AMER_InvisibleFromBlind, INT:0)
		ENDIF
		
		//Reset disable histories when leaving combat.
		Set(%AMER_FrozenHistory, INT:0)
		Set(%AMER_StunnedHistory, INT:0)
		Set(%AMER_PetrifiedHistory, INT:0)
		Set(%AMER_KnockedDownHistory, INT:0)
		Set(%AMER_FearHistory, INT:0)
		Set(%AMER_BlindHistory, INT:0)
		
		//Set reactions available to zero. Probably most effecient
		//to set them to zero no matter what, rather than first
		//performing a conditional.
		Set(%AMER_PredatorShots, INT:0) //Predator
		Set(%AMER_DemonReactions, INT:0) //Demon
		Set(%AMER_AngelReactions, INT:0) //Angel
		Set(%AMER_CharismaReactions, INT:0) //Charisma
	ENDIF
	
	
	
//===============================================//
//                                               //
//   C H A R A C T E R   E X T E N S I O N S     //
//                                               //
//===============================================//