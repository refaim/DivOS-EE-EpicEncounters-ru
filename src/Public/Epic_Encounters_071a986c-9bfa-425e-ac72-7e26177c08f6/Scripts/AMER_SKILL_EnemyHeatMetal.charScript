#TEMPLATE "_SKILL_Base" : AMER_SKILL_HeatMetal
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_AMER_SKILL_HeatMetal=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%AMER_SKILL_HeatMetal_ResistanceLimit = 90
EXTERN FLOAT:%AMER_SKILL_HeatMetal_MinArmor = 3.0
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_AMER_SKILL_HeatMetal
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_AMER_SKILL_HeatMetal")
ACTIONS
	Set(%SkillTargetScore_AMER_SKILL_HeatMetal, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_AMER_SKILL_HeatMetal", Random, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_AMER_SKILL_HeatMetal, null)
	THEN
		Add(%ActionScore_AMER_SKILL_HeatMetal, %SkillTargetScore_AMER_SKILL_HeatMetal)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_AMER_SKILL_HeatMetal
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_AMER_SKILL_HeatMetal
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Armor
	FLOAT:_Level
	FLOAT:_Vitality
	CHARACTERSTAT:_ResistType = FireResistance
	FIXEDSTRING:_ShieldType = "SKILLBOOST_Shield_Fire"
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_AMER_SKILL_HeatMetal")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						IF "!c1|!c2"
						    CharacterGetStat(_StatResistance, _Char, _ResistType)
						    IsGreaterThen(_StatResistance, %AMER_SKILL_HeatMetal_ResistanceLimit)
						THEN
							//Unmapped Armor calculation.
							IF "c1&c2"
								CharacterGetStat(_Armor, _Char, Armor)
								CharacterGetStat(_Level, _Char, Level)
							THEN
								SetVar(__Me, "AMER_UnmapAttributeValue", _Armor)
								SetVar(__Me, "AMER_UnmapAttributeLevel", _Level)
								CallFunction("AMER_UnmapArmor")
								
								IF "c1&!c2"
									GetVar(_Armor, __Me, "AMER_UnmapAttributeValue")
									IsLessThen(_Armor, %AMER_SKILL_HeatMetal_MinArmor)
								THEN
									Add(_Score, _Armor)
							
									//Kill range calculation
									IF "c1"
										CharacterGetStat(_Vitality,  _Char, Vitality)
									THEN
										//Favor low vitality targets.
										Multiply(_Vitality, -2.0)
										Add(_Score, _Vitality)
									ENDIF
								
									//Resistance calculation
									Divide(_StatResistance, -100.0)
									Multiply(_StatResistance, 5.0)
									Add(_Score, _StatResistance)
							
									//Shield calculation
									IF "c1"
										CharacterHasStatus(_Char, SHIELD, _ShieldType)
									THEN
										Add(_Score, -2.0)
									ENDIF
									
									//Marked.
								    IF "c1"
										CharacterHasStatus(_Char, AGGRO_MARKED)
								    THEN
										Add(_Score, 1.0)
								    ENDIF
										
									//Summons are worth less.
									IF "c1"
										CharacterIsSummon(_Char)
									THEN
										Add(_Score, -5.0)
									ENDIF
									
								    // Range score calculation
									IF "c1&c2"
									    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_HeatMetal)
									    GetDistance(_DistanceToChar, __Me, _Char)
									THEN
									    Set(_DistanceScore, _DistanceToChar)
									    IF "c1"
											IsGreaterThen(_DistanceScore, _SkillRangeMax)
									    THEN
											Subtract(_DistanceScore, _SkillRangeMax)
											Multiply(_DistanceScore, -1.0)
									    ELIF "c1"
											IsLessThen(_DistanceScore, _SkillRangeMin)
									    THEN
											Subtract(_DistanceScore, _SkillRangeMin)
											Multiply(_DistanceScore, 1.0)
									    ELSE 
											Set(_DistanceScore, 0.0)
									    ENDIF
										Add(_Score, _DistanceScore)
									ENDIF
								    
								    // Can see score calculation
								    IF "!c1"
										CharacterCanSee(__Me, _Char)
								    THEN
										Add(_Score, -10.0)
								    ENDIF
								    
									IF "c1"
										IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_HeatMetal)
									THEN
										Set(%SkillTargetChar_AMER_SKILL_HeatMetal, _Char)
										Set(%SkillTargetScore_AMER_SKILL_HeatMetal, _Score)
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	//Attempt to use damaging skill to heal allies with
	//>100% resistance to the damage type.
	ELIF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "!c1"
			CharacterHasStatus(_Char, CHARMED)
		THEN
			IF "!c1"
				CharacterIsSummon(_Char)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, INVULNERABLE)
				THEN
					IF "!c1|c2"
						CharacterGetStat(_StatResistance, _Char, _ResistType)
						IsGreaterThen(_StatResistance, 150.0)
					THEN
						//Unmapped Armor calculation.
						IF "c1&c2"
							CharacterGetStat(_Armor, _Char, Armor)
							CharacterGetStat(_Level, _Char, Level)
						THEN
							SetVar(__Me, "AMER_UnmapAttributeValue", _Armor)
							SetVar(__Me, "AMER_UnmapAttributeLevel", _Level)
							CallFunction("AMER_UnmapArmor")
								
							IF "c1&!c2"
								GetVar(_Armor, __Me, "AMER_UnmapAttributeValue")
								IsLessThen(_Armor, %AMER_SKILL_HeatMetal_MinArmor)
							THEN
								Add(_Score, _Armor)
								IF "c1&c2"
									CharacterGetStat(_Vitality,  _Char, Vitality)
									IsLessThen(_Vitality, 0.8)
								THEN
									//Vitality-Resistance calculation: favor low-
									//vitality targets with high resistance.
									Multiply(_Vitality, -1.0)
									Add(_Vitality, 1.0)
									
									//consider resistance above 100
									Subtract(_StatResistance, 100.0)
									Divide(_StatResistance, 100.0)
									Multiply(_StatResistance, 4.0)
									
									Multiply(_Vitality, _StatResistance)
									Add(_Score, _Vitality)
								
									//Status calculation
									IF "c1"
										CharacterHasStatus(_Char, FROZEN)
									THEN
										Add(_Score, 3.0)
									ENDIF
									
									// Range score calculation
									IF "c1&c2"
										CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_HeatMetal)
										GetDistance(_DistanceToChar, __Me, _Char)
									THEN
										Set(_DistanceScore, _DistanceToChar)
										IF "c1"
											IsGreaterThen(_DistanceScore, _SkillRangeMax)
										THEN
											Subtract(_DistanceScore, _SkillRangeMax)
											Multiply(_DistanceScore, -1.0)
										ELIF "c1"
											IsLessThen(_DistanceScore, _SkillRangeMin)
										THEN
											Subtract(_DistanceScore, _SkillRangeMin)
											Multiply(_DistanceScore, 1.0)
										ELSE 
											Set(_DistanceScore, 0.0)
										ENDIF
										Add(_Score, _DistanceScore)
									ENDIF
									
									// Can see score calculation
									IF "!c1"
										CharacterCanSee(__Me, _Char)
									THEN
										Add(_Score, -10.0)
									ENDIF
									
									IF "c1"
										IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_HeatMetal)
									THEN
										Set(%SkillTargetChar_AMER_SKILL_HeatMetal, _Char)
										Set(%SkillTargetScore_AMER_SKILL_HeatMetal, _Score)
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	