#TEMPLATE "_SKILL_Base" : Shout_EnemyInvulnerability
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Shout_EnemyInvulnerability=-1000000
// [GLOBAL_VARS]
EXTERN INT:%Shout_EnemyInvulnerability_UsePreemptively = 0
EXTERN FLOAT:%Shout_EnemyInvulnerability_MinVitality = 0.7
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Shout_EnemyInvulnerability
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_Vitality
	FLOAT:_Score
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Shout_EnemyInvulnerability")
ACTIONS
	Set(%SkillTargetScore_Shout_EnemyInvulnerability, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1&!c2"
		IsEqual(%Shout_EnemyInvulnerability_UsePreemptively, INT:1)
		CharacterHasStatus(__Me, CONSUME, AMER_VoidRegeneration)
	THEN
		Set(%SkillTargetChar_Shout_EnemyInvulnerability, __Me)
		Set(%ActionScore_Shout_EnemyInvulnerability, 20.0)
	ELIF "!c1&c2&!c3"
		CharacterHasStatus(__Me, CONSUME, AMER_VoidRegeneration)
		CharacterGetStat(_Vitality, __Me, Vitality)
		IsGreaterThen(_Vitality, %Shout_EnemyInvulnerability_MinVitality)
	THEN
		Set(_Score, 0.0)
		
		//Favor using at low health.
		Multiply(_Vitality, -5.0)
		Add(_Vitality, 2.5)
		Add(_Score, _Vitality)
		
		//DoT calculation
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Balance)
		THEN
			Add(_Score 0.5)
		ENDIF
		IF "c1|c2"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_AmberPrisonSlow)
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_AmberPrisonSlow2)
		THEN
			Add(_Score 1.0)
		ENDIF
		IF "c1|c2|c3|c4"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Attenuate)
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Attenuate2)
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Attenuate3)
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Attenuate4)
		THEN
			Add(_Score 1.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_AmberPrisonSlow3)
		THEN
			Add(_Score 2.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Torment)
		THEN
			Add(_Score 2.0)
		ENDIF
		IF "c1|c2|c3"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_NaturalOrder)
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_NaturalOrder2)
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_NaturalOrder3)
		THEN
			Add(_Score 2.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Soulsap1)
		THEN
			Add(_Score 1.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Soulsap2)
		THEN
			Add(_Score 2.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Soulsap3)
		THEN
			Add(_Score 4.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Ruin1)
		THEN
			Add(_Score 0.7)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Ruin2)
		THEN
			Add(_Score 1.5)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_Ruin3)
		THEN
			Add(_Score 2.5)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_STATUS_InsectPlague)
		THEN
			Add(_Score 2.0)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_Crush)
		THEN
			Add(_Score 2.0)
		ENDIF
		
		//Status calculation
		IF "c1"
			CharacterHasStatus(__Me, CONSUME, AMER_GreaterInvisibility)
		THEN
			Add(_Score, -1.5)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, DISEASED)
		THEN
			Add(_Score, 1.5)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, SLOWED)
		THEN
			Add(_Score, 0.3)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CRIPPLED)
		THEN
			Add(_Score, 0.4)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, BLEEDING)
		THEN
			Add(_Score, 0.2)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, POISONED)
		THEN
			Add(_Score, 0.2)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, CRAWLING_INFESTATION)
		THEN
			Add(_Score, 1.5)
		ENDIF
		IF "c1"
			CharacterHasStatus(__Me, UNHEALABLE)
		THEN
			Add(_Score, 1.5)
		ENDIF
		
		IF "c1"
			IsGreaterThen(_Score, 0.0)
		THEN
			Set(%SkillTargetChar_Shout_EnemyInvulnerability, __Me)
			Set(%ActionScore_Shout_EnemyInvulnerability, 20.0)
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
EVENT InvulnerabilityVoidRegeneration
VARS
	FLOAT:_Damage
	DAMAGE:_Type
	CHARACTER:_Char
ON
	OnDamage(_Type, _Damage, _Char, _)
ACTIONS
	IF "c1"
		CharacterHasStatus(__Me, CONSUME, AMER_VoidRegeneration)
	THEN
		IF "c1"
			IsGreaterThen(_Damage, 0.0)
		THEN
			CharacterHeal(__Me, _Damage)
		ENDIF
	ENDIF
	
	
	
	