#TEMPLATE "_SKILL_Base" : Cone_Enemy_WaterSpit
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Cone_Enemy_WaterSpit=-1000000
// [GLOBAL_VARS]
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Cone_Enemy_WaterSpit
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_SkillImpactRange
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Cone_Enemy_WaterSpit")
ACTIONS
	Set(%SkillTargetScore_Cone_Enemy_WaterSpit, -1000000)
	
	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1&c2"
	    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Cone_Enemy_WaterSpit) // c1
	    CharacterGetSkillImpactRange(_SkillImpactRange, __Me, Cone_Enemy_WaterSpit) // c2
	THEN
		Subtract(_SkillRangeMax, 0.5)
		Subtract(_SkillImpactRange, 0.5)
		IF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 5, -1)
		THEN
		    Set(%SkillTargetPos_Cone_Enemy_WaterSpit, _TargetPos)
		    Add(%ActionScore_Cone_Enemy_WaterSpit, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 4, -1)
		THEN
		    Set(%SkillTargetPos_Cone_Enemy_WaterSpit, _TargetPos)
		    Add(%ActionScore_Cone_Enemy_WaterSpit, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 3, -1)
		THEN
		    Set(%SkillTargetPos_Cone_Enemy_WaterSpit, _TargetPos)
		    Add(%ActionScore_Cone_Enemy_WaterSpit, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 2, -1)
		THEN
		    Set(%SkillTargetPos_Cone_Enemy_WaterSpit, _TargetPos)
		    Add(%ActionScore_Cone_Enemy_WaterSpit, 20.0)
		ELIF "c1"
		    FindSurface(_TargetPos, __Me, _SkillRangeMin, _SkillRangeMax, Water, __Me, 2, 0, 10) // c1
		THEN
		    Set(%SkillTargetPos_Cone_Enemy_WaterSpit, _TargetPos)
		    Add(%ActionScore_Cone_Enemy_WaterSpit, 20.0)
			/*
			//Disable non-aoe options because working around the disjoint between *actual* cone range
			//and what scripting queries *think* it is will take too much time.
		ELSE 
			IF "c1"
				CharacterGetStat(%Cone_Enemy_WaterSpit_MyInitiative, __Me, Initiative)
			THEN
			    IterateCharactersInCombat(__Me, "CalculateTarget_Cone_Enemy_WaterSpit", Highest, Vitality)
			    IF "!c1"
					IsEqual(%SkillTargetChar_Cone_Enemy_WaterSpit, null)
			    THEN
					Add(%ActionScore_Cone_Enemy_WaterSpit, %SkillTargetScore_Cone_Enemy_WaterSpit)
			    ENDIF
			ENDIF
			*/
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Cone_Enemy_WaterSpit
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	FLOAT:_Score
	FLOAT:_SaveScore
	FLOAT:_Vitality
	FLOAT:_TargetInit
	FLOAT:_Radius
	FLOAT:_SkillRangeMax
	FLOAT:_SkillRangeMin
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	INT:_AllyCount
	INT:_EnemyCount
	INT:_SaveAmount
	ABILITY:_SaveType = BodyBuilding
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Cone_Enemy_WaterSpit")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						IF "!c1&!c2&!c3&!c4&!c5&!c6&!c7"
							//Don't disable disabled characters.
							CharacterHasStatus(_Char, FEAR)
							CharacterHasStatus(_Char, STUNNED)
							CharacterHasStatus(_Char, FROZEN)
							CharacterHasStatus(_Char, PETRIFIED)
							CharacterHasStatus(_Char, KNOCKED_DOWN)
							CharacterHasStatus(_Char, BLIND)
							CharacterHasStatus(_Char, MUTED)
						THEN
							//Favor high vitality targets.
							Multiply(_Vitality, 2.0)
							Add(_Score, _Vitality)
							
							//Summons are worth less.
							IF "c1"
								CharacterIsSummon(_Char)
							THEN
								Add(_Score, -5.0)
							ENDIF
							
							//Status Calculation
							IF "c1"
								CharacterHasStatus(_Char, WET)
							THEN
								Add(_Score, 1.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CHILLED)
							THEN
								Add(_Score, 2.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, SLOWED)
							THEN
								Add(_Score, -1.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CRIPPLED)
							THEN
								Add(_Score, -1.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, WEAK)
							THEN
								Add(_Score, -1.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CURSED)
							THEN
								Add(_Score, -0.5)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, HASTED)
							THEN
								Add(_Score, 1.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, CONSUME, SKILLBOOST_TargetedDamageBoost)
							THEN
								Add(_Score, 1.0)
							ENDIF
							IF "c1"
								CharacterHasStatus(_Char, RAGED)
							THEN
								Add(_Score, 1.0)
							ENDIF
								
							//Marked
							IF "c1"
								CharacterHasStatus(_Char, AGGRO_MARKED)
							THEN
								Add(_Score, 1.0)
							ENDIF
								
							//Saving Throw score calculation
							IF "c1"
								CharacterGetAbility(_SaveAmount, _Char, _SaveType)
							THEN
								Cast(_SaveScore, _SaveAmount)
								Multiply(_SaveScore, -2.0)
								Add(_Score, _SaveScore)
							ENDIF
					
							//Splash score calc.
							IF "c1"
								CharacterGetSkillImpactRange(_Radius, __Me, Cone_Enemy_WaterSpit)
							THEN
								IF "c1&c2"
									CharacterCount(_AllyCount, _Char, _Radius, Ally)
									CharacterCount(_EnemyCount, _Char, _Radius, Enemy)
								THEN
									Multiply(_AllyCount, INT:2)
									Subtract(_EnemyCount, _AllyCount)
									Add(_Score, _EnemyCount)
								ENDIF
							ENDIF
							
							// Range score calculation
							IF "c1&c2"
								CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Cone_Enemy_WaterSpit)
								GetDistance(_DistanceToChar, __Me, _Char)
							THEN
								Set(_DistanceScore, _DistanceToChar)
								IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
								THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
								ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
								THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
								ELSE 
									Set(_DistanceScore, 0.0)
								ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
							
							// Can see score calculation
							IF "!c1"
								CharacterCanSee(__Me, _Char)
							THEN
								Add(_Score, -10.0)
							ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_Cone_Enemy_WaterSpit)
							THEN
								Set(%SkillTargetChar_Cone_Enemy_WaterSpit, _Char)
								Set(%SkillTargetScore_Cone_Enemy_WaterSpit, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	