#TEMPLATE "_SKILL_Base" : Projectile_EnemyBigDeadlySpores
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Projectile_EnemyBigDeadlySpores=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%Projectile_EnemyBigDeadlySpores_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Projectile_EnemyBigDeadlySpores
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_SkillImpactRange
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Projectile_EnemyBigDeadlySpores")
ACTIONS
	Set(%SkillTargetScore_Projectile_EnemyBigDeadlySpores, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1&c2"
	    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_EnemyBigDeadlySpores)
	    CharacterGetSkillImpactRange(_SkillImpactRange, __Me, Projectile_EnemyBigDeadlySpores)
	THEN
		IF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 4, -1)
		THEN
			Set(%SkillTargetPos_Projectile_EnemyBigDeadlySpores, _TargetPos)
			Add(%ActionScore_Projectile_EnemyBigDeadlySpores, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 3, -1)
		THEN
			Set(%SkillTargetPos_Projectile_EnemyBigDeadlySpores, _TargetPos)
			Add(%ActionScore_Projectile_EnemyBigDeadlySpores, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 2, -1)
		THEN
			Set(%SkillTargetPos_Projectile_EnemyBigDeadlySpores, _TargetPos)
			Add(%ActionScore_Projectile_EnemyBigDeadlySpores, 20.0)
		ELSE 
		    IterateCharactersInCombat(__Me, "CalculateTarget_Projectile_EnemyBigDeadlySpores", Lowest, Vitality)
		    IF "!c1"
			IsEqual(%SkillTargetChar_Projectile_EnemyBigDeadlySpores, null)
		    THEN
			Add(%ActionScore_Projectile_EnemyBigDeadlySpores, %SkillTargetScore_Projectile_EnemyBigDeadlySpores)
		    ENDIF
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Projectile_EnemyBigDeadlySpores
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Projectile_EnemyBigDeadlySpores
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Radius
	FLOAT:_Vitality
	INT:_AllyCount
	INT:_AllyZombieCount
	INT:_EnemyCount
	INT:_EnemyZombieCount
	
	CHARACTERSTAT:_ResistType = PoisonResistance
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Projectile_EnemyBigDeadlySpores")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "c1"
				CanSee(__Me, _Char)
			THEN
				IF "c1&c2&!c3"
					CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_EnemySmallDeadlySpores)
					GetDistance(_DistanceToChar, __Me, _Char)
					IsGreaterThen(_DistanceToChar, _SkillRangeMax)
				THEN
					IF "!c1&!c2"
					    CharacterHasStatus(_Char, INVISIBLE)
					    CharacterHasStatus(_Char, SNEAKING)
					THEN
						IF "!c1|!c2"
						    CharacterGetStat(_StatResistance, _Char, _ResistType)
						    IsGreaterThen(_StatResistance, %Projectile_EnemyBigDeadlySpores_ResistanceLimit)
						THEN
							IF "!c1"
								CharacterHasStatus(_Char, CHARMED)
							THEN
								IF "!c1"
									CharacterHasStatus(_Char, INVULNERABLE)
								THEN
									//Kill range calculation
									IF "c1"
										CharacterGetStat(_Vitality,  _Char, Vitality)
									THEN
										//Favor low vitality targets.
										Multiply(_Vitality, -1.0)
										Add(_Vitality, 1.0)
										Multiply(_Vitality, 5.0)
										Add(_Score, _Vitality)
									ENDIF
									
									//Marked.
								    IF "c1"
										CharacterHasStatus(_Char, AGGRO_MARKED)
								    THEN
										Add(_Score, 1.0)
								    ENDIF
									
									//Splash score calc.
									IF "c1"
										CharacterGetSkillImpactRange(_Radius, __Me, Projectile_EnemyBigDeadlySpores)
									THEN
										IF "c1&c2&c3&c4"
											CharacterCount(_AllyCount, _Char, _Radius, Ally)
											CharacterCount(_AllyZombieCount, _Char, _Radius, Ally, null, null, Zombie)
											CharacterCount(_EnemyCount, _Char, _Radius, Enemy)
											CharacterCount(_EnemyZombieCount, _Char, _Radius, Enemy, null, null, Zombie)
										THEN
											Subtract(_EnemyCount, _AllyCount)
											Add(_EnemyCount, _AllyZombieCount)
											Subtract(_EnemyCount, _EnemyZombieCount)
											Add(_Score, _EnemyCount)
										ENDIF
									ENDIF
									
									//Resistance calculation
									Divide(_StatResistance, -100.0)
									Multiply(_StatResistance, 5.0)
									Add(_Score, _StatResistance)
										
									//Summons are worth less.
									IF "c1"
										CharacterIsSummon(_Char)
									THEN
										Add(_Score, -5.0)
									ENDIF
								    
									IF "c1"
										IsGreaterThen(_Score, %SkillTargetScore_Projectile_EnemyBigDeadlySpores)
									THEN
										Set(%SkillTargetChar_Projectile_EnemyBigDeadlySpores, _Char)
										Set(%SkillTargetScore_Projectile_EnemyBigDeadlySpores, _Score)
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	//Attempt to use damaging skill to heal allies with
	//>100% resistance to the damage type.
	ELIF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "c1"
			CanSee(__Me, _Char)
		THEN
			IF "c1&c2&!c3"
				CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_EnemySmallDeadlySpores)
				GetDistance(_DistanceToChar, __Me, _Char)
				IsGreaterThen(_DistanceToChar, _SkillRangeMax)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						IF "!c1"
							CharacterIsSummon(_Char)
						THEN
							IF "!c1|c2|c3"
							    CharacterGetStat(_StatResistance, _Char, _ResistType)
							    IsGreaterThen(_StatResistance, 150.0)
								CharacterHasTalent(_Char, Zombie)
							THEN
								IF "c1&c2"
									CharacterGetStat(_Vitality,  _Char, Vitality)
									IsLessThen(_Vitality, 0.8)
								THEN
									//Vitality-Resistance calculation: favor low-
									//vitality targets with high resistance.
									Multiply(_Vitality, -1.0)
									Add(_Vitality, 1.0)
									
									//consider resistance above 100
									Subtract(_StatResistance, 100.0)
									Divide(_StatResistance, 100.0)
									Multiply(_StatResistance, 4.0)
									
									Multiply(_Vitality, _StatResistance)
									Add(_Score, _Vitality)
								
									//Splash score calc.
									IF "c1"
										CharacterGetSkillImpactRange(_Radius, __Me, Projectile_EnemyBigDeadlySpores)
									THEN
										IF "c1&c2&c3&c4"
											CharacterCount(_AllyCount, _Char, _Radius, Ally)
											CharacterCount(_AllyZombieCount, _Char, _Radius, Ally, null, null, Zombie)
											CharacterCount(_EnemyCount, _Char, _Radius, Enemy)
											CharacterCount(_EnemyZombieCount, _Char, _Radius, Enemy, null, null, Zombie)
										THEN
											Subtract(_EnemyCount, _AllyCount)
											Add(_EnemyCount, _AllyZombieCount)
											Subtract(_EnemyCount, _EnemyZombieCount)
											Add(_Score, _EnemyCount)
										ENDIF
									ENDIF
									
									IF "c1"
										IsGreaterThen(_Score, %SkillTargetScore_Projectile_EnemyBigDeadlySpores)
									THEN
										Set(%SkillTargetChar_Projectile_EnemyBigDeadlySpores, _Char)
										Set(%SkillTargetScore_Projectile_EnemyBigDeadlySpores, _Score)
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	