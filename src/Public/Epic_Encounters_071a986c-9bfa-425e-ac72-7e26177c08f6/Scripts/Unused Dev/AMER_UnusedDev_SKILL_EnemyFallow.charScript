#TEMPLATE "_SKILL_Base" : AMER_SKILL_Fallow
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_AMER_SKILL_Fallow=-1000000
// [GLOBAL_VARS]
EXTERN INT:%AMER_SKILL_Fallow_UseOffensively = 1
EXTERN FLOAT:%AMER_SKILL_Fallow_MinAPHeal = 3.0
EXTERN INT:%AMER_SKILL_Fallow_IAmStationary = 0
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_AMER_SKILL_Fallow
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_AMER_SKILL_Fallow")
ACTIONS
	Set(%SkillTargetScore_AMER_SKILL_Fallow, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_AMER_SKILL_Fallow", Lowest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_AMER_SKILL_Fallow, null)
	THEN
		Add(%ActionScore_AMER_SKILL_Fallow, %SkillTargetScore_AMER_SKILL_Fallow)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should target
EVENT CalculateTarget_AMER_SKILL_Fallow
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_AMER_SKILL_Fallow
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	FLOAT:_AP
	FLOAT:_VitalityPercentage = 0.75
	FLOAT:_SplashRadius = 3
	FLOAT:_MaxAPDrain = 3
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_AMER_SKILL_Fallow")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "c1"
			CharacterIsAlly(__Me, _Char)
		THEN
			IF "c1&c2&!c3"
				CharacterGetStat(_Vitality, _Char, Vitality)
				IsLessThen(_Vitality, _VitalityPercentage)
				CharacterHasStatus(_Char, DECAYING_TOUCH)
			THEN
				IF "c1"
					CharacterGetStat(_AP, _Char, ActionPoints)
				THEN
					IF "c1"
						IsEqual(_Char, __Me)
					THEN
						Subtract(_AP, 4.0)	//If _Char == __Me, consider that I have to pay for the spell, then still have AP to drain.
					ENDIF
					IF "c1"
						IsGreaterThen(_AP, %AMER_SKILL_Fallow_MinAPHeal)
					THEN
						IF "!c1"
							CharacterHasTalent(_Char, Zombie)
						THEN
							IF "!c1"
								CharacterHasStatus(_Char, CHARMED)
							THEN
								IF "!c1"
									CharacterHasStatus(_Char, UNHEALABLE)
								THEN
									IF "!c1"
										CharacterHasStatus(_Char, INVULNERABLE)
									THEN
										//Triage score calculation
										Multiply(_Vitality, -1.0)
										Add(_Vitality, 1.0)
										Multiply(_Vitality, 5.0)
										Add(_Score, _Vitality)
											
										//Summons are worth less.
										IF "c1"
											CharacterIsSummon(_Char)
										THEN
											Add(_Score, -5.0)
										ENDIF
										
										//AP Drain:Heal score calculation
										//Fallow only drains up to _MaxAPDrain action points.
										IF "c1"
											IsGreaterThen(_AP, _MaxAPDrain)
										THEN
											Set(_AP, _MaxAPDrain)
										ENDIF
										IF "!c1&c2"
											IsLessThen(_Vitality, 0.67)
											IsGreaterThen(_AP, 2.0)
										THEN
											Add(_Score, -3.0)
										ELIF "!c1&c2"
											IsGreaterThen(_Vitality, 0.64)
											IsGreaterThen(_AP, 2.0)
										THEN
											Add(_Score, 3.0)
										ENDIF
										
										// Range score calculation
										IF "c1&c2"
											CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_Fallow)
											GetDistance(_DistanceToChar, __Me, _Char)
										THEN
											Set(_DistanceScore, _DistanceToChar)
											IF "(c1)"
												IsGreaterThen(_DistanceScore, _SkillRangeMax)
											THEN
												IF "c1"
													IsEqual(%AMER_SKILL_Fallow_IAmStationary, INT:0)
												THEN
													Subtract(_DistanceScore, _SkillRangeMax)
													Multiply(_DistanceScore, -1.0)
												ELSE
													Add(_Score, -9000000)
												ENDIF
											ELIF "(c1)"
												IsLessThen(_DistanceScore, _SkillRangeMin)
											THEN
												IF "c1"
													IsEqual(%AMER_SKILL_Fallow_IAmStationary, INT:0)
												THEN
													Subtract(_DistanceScore, _SkillRangeMin)
													Multiply(_DistanceScore, 1.0)
												ELSE
													Add(_Score, -9000000)
												ENDIF
											ELSE 
												Set(_DistanceScore, 0.0)
											ENDIF
											Add(_Score, _DistanceScore)
										ENDIF
												
										// Can see score calculation
										IF "!c1"
											CharacterCanSee(__Me, _Char)
										THEN
											IF "c1"
												IsEqual(%AMER_SKILL_Fallow_IAmStationary, INT:0)
											THEN
												Add(_Score, -10.0)
											ELSE
												Add(_Score, -9000000)
											ENDIF
										ENDIF
										
										IF "c1"
											IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_Fallow)
										THEN
											Set(%SkillTargetChar_AMER_SKILL_Fallow, _Char)
											Set(%SkillTargetScore_AMER_SKILL_Fallow, _Score)
										ENDIF
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		//Fallow can be used offensively to drain AP from an opponent.
		ELIF "!c1&!c2&c3"
			CharacterHasStatus(_Char, INVISIBLE)
			CharacterHasStatus(_Char, SNEAKING)
			IsEqual(%AMER_SKILL_Fallow_UseOffensively, INT:1)
		THEN
			IF "c1&!c2"
				CharacterGetStat(_AP, _Char, ActionPoints)
				IsLessThen(_AP, 6.0)
			THEN
				IF "!c1"
					CharacterIsSummon(_Char)
				THEN
					//Zombie will be damaged by the small flat heal.
					IF "c1"
						CharacterHasTalent(_Char, Zombie)
					THEN
						Add(_Score, 1.0)
					ENDIF
					
					//Offensive Fallow Bonus:
					Add(_Score, _AP)
							
					// Range score calculation
					IF "c1&c2"
						CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_Fallow)
						GetDistance(_DistanceToChar, __Me, _Char)
					THEN
						Set(_DistanceScore, _DistanceToChar)
						IF "(c1)"
							IsGreaterThen(_DistanceScore, _SkillRangeMax)
						THEN
							IF "c1"
								IsEqual(%AMER_SKILL_Fallow_IAmStationary, INT:0)
							THEN
								Subtract(_DistanceScore, _SkillRangeMax)
								Multiply(_DistanceScore, -1.0)
							ELSE
								Add(_Score, -9000000)
							ENDIF
						ELIF "(c1)"
							IsLessThen(_DistanceScore, _SkillRangeMin)
						THEN
							IF "c1"
								IsEqual(%AMER_SKILL_Fallow_IAmStationary, INT:0)
							THEN
								Subtract(_DistanceScore, _SkillRangeMin)
								Multiply(_DistanceScore, 1.0)
							ELSE
								Add(_Score, -9000000)
							ENDIF
						ELSE 
							Set(_DistanceScore, 0.0)
						ENDIF
						Add(_Score, _DistanceScore)
					ENDIF
							
					// Can see score calculation
					IF "!c1"
						CharacterCanSee(__Me, _Char)
					THEN
						IF "c1"
							IsEqual(%AMER_SKILL_Fallow_IAmStationary, INT:0)
						THEN
							Add(_Score, -10.0)
						ELSE
							Add(_Score, -9000000)
						ENDIF
					ENDIF
							
					IF "c1"
						IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_Fallow)
					THEN
						Set(%SkillTargetChar_AMER_SKILL_Fallow, _Char)
						Set(%SkillTargetScore_AMER_SKILL_Fallow, _Score)
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	