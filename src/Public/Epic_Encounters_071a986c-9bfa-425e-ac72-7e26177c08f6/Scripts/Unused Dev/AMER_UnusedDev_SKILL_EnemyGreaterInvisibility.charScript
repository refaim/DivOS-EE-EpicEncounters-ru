#TEMPLATE "_SKILL_Base" : Target_InvisibilityTarget
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_InvisibilityTarget=-1000000
// [GLOBAL_VARS]
EXTERN INT:%Target_InvisibilityTarget_UseOnAllies = 1
FLOAT:%Target_InvisibilityTarget_TargetTricks
FLOAT:%Target_InvisibilityTarget_ProximityScore
FLOAT3:%Target_InvisibilityTarget_CharPos
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_InvisibilityTarget
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_InvisibilityTarget")
ACTIONS
	Set(%SkillTargetScore_Target_InvisibilityTarget, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1"
		IsEqual(%Target_InvisibilityTarget_UseOnAllies, INT:1)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_Target_InvisibilityTarget", Lowest, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_Target_InvisibilityTarget, null)
		THEN
			Add(%ActionScore_Target_InvisibilityTarget, %SkillTargetScore_Target_InvisibilityTarget)
		ENDIF
	ELIF "!c1"
		CharacterHasStatus(__Me, CONSUME, AMER_GreaterInvisibility)
	THEN
		Set(%SkillTargetChar_Target_InvisibilityTarget, __Me)
		Set(%ActionScore_Target_InvisibilityTarget, 20.0)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	/*
EVENT Target_InvisibilityTarget_DetectorProximity
VARS
	CHARACTER:_DetectorChar
	FLOAT:_Perception
	FLOAT:_Distance
	FLOAT:_Range
ON
	OnIterateCharacter(_DetectorChar, "Target_InvisibilityTarget_DetectorProximity")
ACTIONS
	IF "c1"
		CharacterIsEnemy(_DetectorChar, __Me)
	THEN
		IF "!c1"
			CharacterIsDead(_DetectorChar)
		THEN
			IF "c1"
				CharacterHasTalent(_DetectorChar, LightStep)
			THEN
				IF "c1&c2"
					CharacterGetStat(_Perception, _DetectorChar, Perception)
					GetDistance(_Distance, %Target_InvisibilityTarget_CharPos, _DetectorChar)
				THEN
					Subtract(_Perception, 5.0)
					Subtract(_Perception, %Target_InvisibilityTarget_TargetTricks)
					Set(_Range, _Perception)
					Multiply(_Range, 2.0)
					IF "!c1"
						IsGreaterThen(_Distance, _Range)
					THEN
						Subtract(_Range, _Distance)
						Multiply(_Range, -1.0)
						Add(%Target_InvisibilityTarget_ProximityScore, _Range)
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	*/
	
	
	
// Calculate the character we should target
EVENT CalculateTarget_Target_InvisibilityTarget
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_InvisibilityTarget
	INT:_Chain
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	INT:_Ability
	FLOAT:_Vitality
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_InvisibilityTarget")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "c1"
			CharacterIsAlly(__Me, _Char)
		THEN
			IF "!c1&!c2"
				CharacterHasStatus(_Char, INVISIBLE)
				CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterIsSummon(_Char)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, CHARMED)
					THEN
						IF "!c1"
							CharacterHasStatus(_Char, CONSUME, AMER_GreaterInvisibility)
						THEN
							//Triage score calculation
							IF "c1"
								CharacterGetStat(_Vitality, _Char, Vitality)
							THEN
								Multiply(_Vitality, -1.0)
								Add(_Vitality, 1.0)
								Multiply(_Vitality, 5.0)
								Add(_Score, _Vitality)
							ENDIF
							
							//Dagger wielder bonus
							IF "c1"
								CharacterHasWeaponType(_Char, SmallWeapons, INT:1)
							THEN
								Add(_Score, 2.0)
							ENDIF
							
							//Chain preservation calculation
							IF "c1"
								GetVar(_Chain, _Char, "AMER_Chain")
							THEN
								Add(_Score, _Chain)
							ENDIF
							
							//I think Iterators within iterators might break stuff.
							/*
							//Detector proximity calculation
							IF "c1&c2"
								CharacterGetAbility(_Ability, _Char, Sneaking)
								GetPosition(_Char, %Target_InvisibilityTarget_CharPos)
							THEN
								Cast(%Target_InvisibilityTarget_TargetTricks, _Ability)
								Multiply(%Target_InvisibilityTarget_TargetTricks, 1.5)
								Set(%Target_InvisibilityTarget_ProximityScore, 0.0)
								IterateCharactersNear(_Char, 20.0, "Target_InvisibilityTarget_DetectorProximity")
								Add(_Score, %Target_InvisibilityTarget_ProximityScore)
							ENDIF
							*/
							
							//Status calculation
							IF "c1|c2|c3|c4|c5|c6"
								CharacterHasStatus(_Char, FROZEN)
								CharacterHasStatus(_Char, STUNNED)
								CharacterHasStatus(_Char, FEAR)
								CharacterHasStatus(_Char, KNOCKED_DOWN)
								CharacterHasStatus(_Char, BLIND)
								CharacterHasStatus(_Char, PETRIFIED)
							THEN
								Add(_Score, 3.0)
							ENDIF
							
							// Range score calculation
							IF "c1&c2"
								CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_InvisibilityTarget)
								GetDistance(_DistanceToChar, __Me, _Char)
							THEN
								Set(_DistanceScore, _DistanceToChar)
								IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
								THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
								ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
								THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
								ELSE 
									Set(_DistanceScore, 0.0)
								ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
							
							// Can see score calculation
							IF "!c1"
								CharacterCanSee(__Me, _Char)
							THEN
								Add(_Score, -10.0)
							ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_Target_InvisibilityTarget)
							THEN
								Set(%SkillTargetChar_Target_InvisibilityTarget, _Char)
								Set(%SkillTargetScore_Target_InvisibilityTarget, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	