#TEMPLATE "_SKILL_Base" : AMER_SKILL_ThornCascade
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_AMER_SKILL_ThornCascade=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%AMER_SKILL_ThornCascade_ResistanceLimit = 90
EXTERN INT:%AMER_SKILL_ThornCascade_IAmStationary = 0
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_AMER_SKILL_ThornCascade
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_AMER_SKILL_ThornCascade")
ACTIONS
	Set(%SkillTargetScore_AMER_SKILL_ThornCascade, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_AMER_SKILL_ThornCascade", Lowest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_AMER_SKILL_ThornCascade, null)
	THEN
		Add(%ActionScore_AMER_SKILL_ThornCascade, %SkillTargetScore_AMER_SKILL_ThornCascade)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_AMER_SKILL_ThornCascade
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_AMER_SKILL_ThornCascade
	FLOAT:_StatResistance1
	FLOAT:_StatResistance2
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	CHARACTERSTAT:_ResistType1 = EarthResistance
	CHARACTERSTAT:_ResistType2 = PoisonResistance
	FIXEDSTRING:_ShieldType = "SKILLBOOST_Shield_Earth"
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_AMER_SKILL_ThornCascade")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1|!c2"
					    CharacterGetStat(_StatResistance1, _Char, _ResistType1)
					    IsGreaterThen(_StatResistance1, %AMER_SKILL_ThornCascade_ResistanceLimit)
					THEN
						//Kill range calculation
						IF "c1"
							CharacterGetStat(_Vitality,  _Char, Vitality)
						THEN
							//Favor low vitality targets.
							Multiply(_Vitality, -1.0)
							Add(_Vitality, 1.0)
							Multiply(_Vitality, 5.0)
							Add(_Score, _Vitality)
						ENDIF
						
						//Resistance calculation: consider both resistances here.
						Divide(_StatResistance1, -100.0)
						Multiply(_StatResistance1, 2.0)
						Add(_Score, _StatResistance1)
						IF "c1"
							CharacterGetStat(_StatResistance2, _Char, _ResistType2)
						THEN
							Divide(_StatResistance2, -100.0)
							Multiply(_StatResistance2, 2.0)
							Add(_Score, _StatResistance2)
						ENDIF
							
						//Shield calculation
						IF "c1"
							CharacterHasStatus(_Char, SHIELD, _ShieldType)
						THEN
							Add(_Score, -2.0)
						ENDIF
						
						//Marked.
					    IF "c1"
							CharacterHasStatus(_Char, AGGRO_MARKED)
					    THEN
							Add(_Score, 1.0)
					    ENDIF
							
						//Summons are worth less.
						IF "c1"
							CharacterIsSummon(_Char)
						THEN
							Add(_Score, -5.0)
						ENDIF
						
					    // Range score calculation
						IF "c1&c2"
						    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_ThornCascade)
						    GetDistance(_DistanceToChar, __Me, _Char)
						THEN
						    Set(_DistanceScore, _DistanceToChar)
						    IF "c1"
								IsGreaterThen(_DistanceScore, _SkillRangeMax)
						    THEN
								IF "c1"
									IsEqual(%AMER_SKILL_ThornCascade_IAmStationary, INT:0)
								THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
								ELSE
									Add(_Score, -9000000)
								ENDIF
						    ELIF "c1"
								IsLessThen(_DistanceScore, _SkillRangeMin)
						    THEN
								IF "c1"
									IsEqual(%AMER_SKILL_ThornCascade_IAmStationary, INT:0)
								THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
								ELSE
									Add(_Score, -9000000)
								ENDIF
						    ELSE 
								Set(_DistanceScore, 0.0)
						    ENDIF
							Add(_Score, _DistanceScore)
						ENDIF
					    
					    // Can see score calculation
					    IF "!c1"
							CharacterCanSee(__Me, _Char)
					    THEN
							IF "c1"
								IsEqual(%AMER_SKILL_ThornCascade_IAmStationary, INT:0)
							THEN
								Add(_Score, -10.0)
							ELSE
								Add(_Score, -9000000)
							ENDIF
					    ENDIF
					    
						IF "c1"
							IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_ThornCascade)
						THEN
							Set(%SkillTargetChar_AMER_SKILL_ThornCascade, _Char)
							Set(%SkillTargetScore_AMER_SKILL_ThornCascade, _Score)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	//Attempt to use damaging skill to heal allies with
	//>100% resistance to the damage type.
	ELIF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "!c1"
			CharacterHasStatus(_Char, CHARMED)
		THEN
			IF "!c1"
				CharacterHasStatus(_Char, INVULNERABLE)
			THEN
				IF "!c1"
					CharacterIsSummon(_Char)
				THEN
					IF "(!c1|c2)&(!c3|c4|c5)"
					    CharacterGetStat(_StatResistance1, _Char, _ResistType1)
					    IsGreaterThen(_StatResistance1, 150.0)
					    CharacterGetStat(_StatResistance2, _Char, _ResistType2)
					    IsGreaterThen(_StatResistance2, 150.0)
						CharacterHasTalent(_Char Zombie)
					THEN
						IF "c1&c2"
							CharacterGetStat(_Vitality,  _Char, Vitality)
							IsLessThen(_Vitality, 0.8)
						THEN
							//Vitality-Resistance calculation: favor low-
							//vitality targets with high resistance.
							Multiply(_Vitality, -1.0)
							Add(_Vitality, 1.0)
							
							//consider agregate resistance above 100
							Add(_StatResistance1, _StatResistance2)
							Subtract(_StatResistance1, 100.0)
							Divide(_StatResistance1, 100.0)
							Multiply(_StatResistance1, 4.0)
							
							Multiply(_Vitality, _StatResistance1)
							Add(_Score, _Vitality)
						
						    // Range score calculation
							IF "c1&c2"
							    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_ThornCascade)
							    GetDistance(_DistanceToChar, __Me, _Char)
							THEN
							    Set(_DistanceScore, _DistanceToChar)
							    IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
							    THEN
									IF "c1"
										IsEqual(%AMER_SKILL_ThornCascade_IAmStationary, INT:0)
									THEN
										Subtract(_DistanceScore, _SkillRangeMax)
										Multiply(_DistanceScore, -1.0)
									ELSE
										Add(_Score, -9000000)
									ENDIF
							    ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
							    THEN
									IF "c1"
										IsEqual(%AMER_SKILL_ThornCascade_IAmStationary, INT:0)
									THEN
										Subtract(_DistanceScore, _SkillRangeMin)
										Multiply(_DistanceScore, 1.0)
									ELSE
										Add(_Score, -9000000)
									ENDIF
							    ELSE 
									Set(_DistanceScore, 0.0)
							    ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
						    
						    // Can see score calculation
						    IF "!c1"
								CharacterCanSee(__Me, _Char)
						    THEN
								IF "c1"
									IsEqual(%AMER_SKILL_ThornCascade_IAmStationary, INT:0)
								THEN
									Add(_Score, -10.0)
								ELSE
									Add(_Score, -9000000)
								ENDIF
						    ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_ThornCascade)
							THEN
								Set(%SkillTargetChar_AMER_SKILL_ThornCascade, _Char)
								Set(%SkillTargetScore_AMER_SKILL_ThornCascade, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	