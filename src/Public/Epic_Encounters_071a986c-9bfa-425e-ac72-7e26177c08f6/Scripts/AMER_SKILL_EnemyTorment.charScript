#TEMPLATE "_SKILL_Base" : AMER_SKILL_Torment
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_AMER_SKILL_Torment=-1000000
// [GLOBAL_VARS]
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_AMER_SKILL_Torment
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_AMER_SKILL_Torment")
ACTIONS
	Set(%SkillTargetScore_AMER_SKILL_Torment, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_AMER_SKILL_Torment", Random, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_AMER_SKILL_Torment, null)
	THEN
		Add(%ActionScore_AMER_SKILL_Torment, %SkillTargetScore_AMER_SKILL_Torment)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_AMER_SKILL_Torment
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_AMER_SKILL_Torment
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_SaveScore
	FLOAT:_Vitality
	INT:_SaveAmount
	ABILITY:_SaveType = BodyBuilding
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_AMER_SKILL_Torment")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					//Kill range calculation
					IF "c1"
						CharacterGetStat(_Vitality,  _Char, Vitality)
					THEN
						//Favor high vitality targets.
						Multiply(_Vitality, 2.0)
						Add(_Score, _Vitality)
					ENDIF
						
					//Marked.
					IF "c1"
						CharacterHasStatus(_Char, AGGRO_MARKED)
					THEN
						Add(_Score, 1.0)
					ENDIF
							
					//Summons are worth less.
					IF "c1"
						CharacterIsSummon(_Char)
					THEN
						Add(_Score, -5.0)
					ENDIF
					
					//Debuff Refresh score calculation
					IF "c1"
						CharacterHasStatus(_Char, CONSUME, "AMER_STATUS_Torment")
					THEN
						Add(_Score, -10.0)
					ENDIF
					
					//Saving Throw score calculation
					IF "c1"
						CharacterGetAbility(_SaveAmount, _Char, _SaveType)
					THEN
						Cast(_SaveScore, _SaveAmount)
						Multiply(_SaveScore, -1.0)
						Add(_Score, _SaveScore)
					ENDIF
					
					// Range score calculation
					IF "c1&c2"
						CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_Torment)
						GetDistance(_DistanceToChar, __Me, _Char)
					THEN
						Set(_DistanceScore, _DistanceToChar)
						IF "c1"
							IsGreaterThen(_DistanceScore, _SkillRangeMax)
						THEN
							Subtract(_DistanceScore, _SkillRangeMax)
							Multiply(_DistanceScore, -1.0)
						ELIF "c1"
							IsLessThen(_DistanceScore, _SkillRangeMin)
						THEN
							Subtract(_DistanceScore, _SkillRangeMin)
							Multiply(_DistanceScore, 1.0)
						ELSE 
							Set(_DistanceScore, 0.0)
						ENDIF
						Add(_Score, _DistanceScore)
					ENDIF
					
					// Can see score calculation
					IF "!c1"
						CharacterCanSee(__Me, _Char)
					THEN
						Add(_Score, -10.0)
					ENDIF
					
					IF "c1"
						IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_Torment)
					THEN
						Set(%SkillTargetChar_AMER_SKILL_Torment, _Char)
						Set(%SkillTargetScore_AMER_SKILL_Torment, _Score)
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	