#TEMPLATE "_SKILL_Base" : Target_EnemyCripplingBlow
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_EnemyCripplingBlow=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%Target_EnemyCripplingBlow_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_EnemyCripplingBlow
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_EnemyCripplingBlow")
ACTIONS
	Set(%SkillTargetScore_Target_EnemyCripplingBlow, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_Target_EnemyCripplingBlow", Lowest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_Target_EnemyCripplingBlow, null)
	THEN
		Add(%ActionScore_Target_EnemyCripplingBlow, %SkillTargetScore_Target_EnemyCripplingBlow)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Target_EnemyCripplingBlow
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_EnemyCripplingBlow
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	FLOAT:_SaveScore
	INT:_SaveAmount
	CHARACTERSTAT:_ResistType = CrushingResistance
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_EnemyCripplingBlow")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1|!c2"
				    CharacterGetStat(_StatResistance, _Char, _ResistType)
				    IsGreaterThen(_StatResistance, %Target_EnemyCripplingBlow_ResistanceLimit)
				THEN
					IF "c1"
						CharacterHasStatus(_Char, CHARMED)
					THEN
						//Kill range calculation.
						IF "c1&c2"
							CharacterGetStat(_Vitality, _Char, Vitality)
							IsGreaterThen(_Vitality, 0.1)	//Don't waste it.
						THEN
							Multiply(_Vitality, -2.0)
							Add(_Vitality, 2.0)
							Add(_Score, _Vitality)
						ENDIF
						
						//Resistance calculation
						Divide(_StatResistance, -100.0)
						Multiply(_StatResistance, 5.0)
						Add(_Score, _StatResistance)
						
						//Marked.
					    IF "c1"
							CharacterHasStatus(_Char, AGGRO_MARKED)
					    THEN
							Add(_Score, 1.0)
					    ENDIF
							
						//Summons are worth less.
						IF "c1"
							CharacterIsSummon(_Char)
						THEN
							Add(_Score, -5.0)
						ENDIF
						
						//Debuff Refresh score calculation
						IF "c1"
							CharacterHasStatus(_Char, CRIPPLED)
						THEN
							Add(_Score, -10.0)
						ENDIF
							
						//Status consideration calculation.
						IF "c1"
							CharacterHasStatus(_Char, SLOWED)
						THEN
							Add(_Score, -1.0)
						ENDIF
						IF "c1"
							CharacterHasStatus(_Char, WEAK)
						THEN
							Add(_Score, -1.0)
						ENDIF
						
					    // Range score calculation
						IF "c1&c2"
						    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_EnemyCripplingBlow)
						    GetDistance(_DistanceToChar, __Me, _Char)
						THEN
						    Set(_DistanceScore, _DistanceToChar)
						    IF "(c1)"
								IsGreaterThen(_DistanceScore, _SkillRangeMax)
						    THEN
								Subtract(_DistanceScore, _SkillRangeMax)
								Multiply(_DistanceScore, -1.0)
						    ELIF "(c1)"
								IsLessThen(_DistanceScore, _SkillRangeMin)
						    THEN
								Subtract(_DistanceScore, _SkillRangeMin)
								Multiply(_DistanceScore, 1.0)
						    ELSE 
								Set(_DistanceScore, 0.0)
						    ENDIF
							Add(_Score, _DistanceScore)
						ENDIF
					    
					    // Can see score calculation
					    IF "!c1"
							CharacterCanSee(__Me, _Char)
					    THEN
							Add(_Score, -10.0)
					    ENDIF
					    
						IF "c1"
							IsGreaterThen(_Score, %SkillTargetScore_Target_EnemyCripplingBlow)
						THEN
							Set(%SkillTargetChar_Target_EnemyCripplingBlow, _Char)
							Set(%SkillTargetScore_Target_EnemyCripplingBlow, _Score)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	