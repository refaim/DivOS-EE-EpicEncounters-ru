#TEMPLATE "_SKILL_Base" : ProjectileStrike_HailAttack
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_ProjectileStrike_HailAttack=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%ProjectileStrike_HailAttack_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_ProjectileStrike_HailAttack
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_SkillImpactRange
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_ProjectileStrike_HailAttack")
ACTIONS
	Set(%SkillTargetScore_ProjectileStrike_HailAttack, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1&c2"
	    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, ProjectileStrike_HailAttack)
	    CharacterGetSkillImpactRange(_SkillImpactRange, __Me, ProjectileStrike_HailAttack)
	THEN
		//Add some extra impact range due to the explosion raidus of
		//the individual strikes.
		Add(_SkillImpactRange, 1.0)
		
		IF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 5, -1)
		THEN
			Set(%SkillTargetPos_ProjectileStrike_HailAttack, _TargetPos)
			Add(%ActionScore_ProjectileStrike_HailAttack, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 4, -1)
		THEN
			Set(%SkillTargetPos_ProjectileStrike_HailAttack, _TargetPos)
			Add(%ActionScore_ProjectileStrike_HailAttack, 20.0)
		ELIF "c1"
			FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, 0, 3, -1)
		THEN
			Set(%SkillTargetPos_ProjectileStrike_HailAttack, _TargetPos)
			Add(%ActionScore_ProjectileStrike_HailAttack, 20.0)
		ELSE
		    IterateCharactersInCombat(__Me, "CalculateTarget_ProjectileStrike_HailAttack", Lowest, Vitality)
		    IF "!c1"
				IsEqual(%SkillTargetChar_ProjectileStrike_HailAttack, null)
		    THEN
				Add(%ActionScore_ProjectileStrike_HailAttack, %SkillTargetScore_ProjectileStrike_HailAttack)
		    ENDIF
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_ProjectileStrike_HailAttack
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_ProjectileStrike_HailAttack
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Radius
	FLOAT:_SplashScore
	FLOAT:_Vitality
	INT:_AllyCount
	INT:_AllyFrozenCount
	INT:_EnemyCount
	INT:_EnemyFrozenCount
	CHARACTERSTAT:_ResistType = WaterResistance
	FIXEDSTRING:_ShieldType = "SKILLBOOST_Shield_Water"
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_ProjectileStrike_HailAttack")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1|!c2"
				    CharacterGetStat(_StatResistance, _Char, _ResistType)
				    IsGreaterThen(_StatResistance, %ProjectileStrike_HailAttack_ResistanceLimit)
				THEN
					IF "!c1&!c2"
						CharacterHasStatus(_Char, CHARMED)
						CharacterHasStatus(_Char, CONSUME, SKILLBOOST_ImmuneToFreezing)
					THEN
						IF "!c1"
							CharacterHasStatus(_Char, INVULNERABLE)
						THEN
							//Kill range calculation
							IF "c1"
								CharacterGetStat(_Vitality,  _Char, Vitality)
							THEN
								//Favor low vitality targets.
								Multiply(_Vitality, -2.0)
								Add(_Score, _Vitality)
							ENDIF
							
							//Marked.
						    IF "c1"
								CharacterHasStatus(_Char, AGGRO_MARKED)
						    THEN
								Add(_Score, 1.0)
						    ENDIF
							
							//Resistance calculation
							Divide(_StatResistance, -100.0)
							Multiply(_StatResistance, 5.0)
							Add(_Score, _StatResistance)
						
							//Splash score calc.
							IF "c1"
								CharacterGetSkillImpactRange(_Radius, __Me, ProjectileStrike_HailAttack)
							THEN
								IF "c1&c2"
									CharacterCount(_AllyCount, _Char, _Radius, Ally)
									CharacterCount(_EnemyCount, _Char, _Radius, Enemy)
								THEN
									Subtract(_EnemyCount, _AllyCount)
									Add(_Score, _EnemyCount)
								ENDIF
							ENDIF
							
							//Shield calculation
							IF "c1"
								CharacterHasStatus(_Char, SHIELD, _ShieldType)
							THEN
								Add(_Score, -2.0)
							ENDIF
								
							//Summons are worth less.
							IF "c1"
								CharacterIsSummon(_Char)
							THEN
								Add(_Score, -5.0)
							ENDIF
							
						    // Range score calculation
							IF "c1&c2"
							    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, ProjectileStrike_HailAttack)
							    GetDistance(_DistanceToChar, __Me, _Char)
							THEN
							    Set(_DistanceScore, _DistanceToChar)
							    IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
							    THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
							    ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
							    THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
							    ELSE 
									Set(_DistanceScore, 0.0)
							    ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
						    
						    // Can see score calculation
						    IF "!c1"
								CharacterCanSee(__Me, _Char)
						    THEN
								Add(_Score, -10.0)
						    ENDIF
						    
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_ProjectileStrike_HailAttack)
							THEN
								Set(%SkillTargetChar_ProjectileStrike_HailAttack, _Char)
								Set(%SkillTargetScore_ProjectileStrike_HailAttack, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	//Attempt to use damaging skill to heal allies with
	//>100% resistance to the damage type.
	ELIF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "!c1"
			CharacterHasStatus(_Char, CHARMED)
		THEN
			IF "!c1"
				CharacterHasStatus(_Char, INVULNERABLE)
			THEN
				IF "!c1"
					CharacterIsSummon(_Char)
				THEN
					IF "!c1|c2"
					    CharacterGetStat(_StatResistance, _Char, _ResistType)
					    IsGreaterThen(_StatResistance, 150.0)
					THEN
						IF "c1&c2"
							CharacterGetStat(_Vitality,  _Char, Vitality)
							IsLessThen(_Vitality, 0.8)
						THEN
							//Vitality-Resistance calculation: favor low-
							//vitality targets with high resistance.
							Multiply(_Vitality, -1.0)
							Add(_Vitality, 1.0)
							
							//consider resistance above 100
							Subtract(_StatResistance, 100.0)
							Divide(_StatResistance, 100.0)
							Multiply(_StatResistance, 4.0)
							
							Multiply(_Vitality, _StatResistance)
							Add(_Score, _Vitality)
						
							//Splash score calc.
							IF "c1"
								CharacterGetSkillImpactRange(_Radius, __Me, ProjectileStrike_HailAttack)
							THEN
								IF "c1&c2"
									CharacterCount(_AllyCount, _Char, _Radius, Ally)
									CharacterCount(_EnemyCount, _Char, _Radius, Enemy)
								THEN
									Subtract(_EnemyCount, _AllyCount)
									Add(_Score, _EnemyCount)
								ENDIF
							ENDIF
							
							// Range score calculation
							IF "c1&c2"
								CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, ProjectileStrike_HailAttack)
								GetDistance(_DistanceToChar, __Me, _Char)
							THEN
								Set(_DistanceScore, _DistanceToChar)
								IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
								THEN
									Subtract(_DistanceScore, _SkillRangeMax)
									Multiply(_DistanceScore, -1.0)
								ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
								THEN
									Subtract(_DistanceScore, _SkillRangeMin)
									Multiply(_DistanceScore, 1.0)
								ELSE 
									Set(_DistanceScore, 0.0)
								ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
							
							// Can see score calculation
							IF "!c1"
								CharacterCanSee(__Me, _Char)
							THEN
								Add(_Score, -10.0)
							ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_ProjectileStrike_HailAttack)
							THEN
								Set(%SkillTargetChar_ProjectileStrike_HailAttack, _Char)
								Set(%SkillTargetScore_ProjectileStrike_HailAttack, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	