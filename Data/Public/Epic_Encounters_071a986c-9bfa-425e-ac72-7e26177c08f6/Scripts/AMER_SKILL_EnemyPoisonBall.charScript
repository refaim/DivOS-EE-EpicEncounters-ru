#TEMPLATE "_SKILL_Base" : Projectile_EnemyPoisonball
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Projectile_EnemyPoisonball=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%Projectile_EnemyPoisonball_ResistanceLimit = 90
EXTERN INT:%Projectile_EnemyPoisonball_IAmStationary = 0
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Projectile_EnemyPoisonball
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Projectile_EnemyPoisonball")
ACTIONS
	Set(%SkillTargetScore_Projectile_EnemyPoisonball, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_Projectile_EnemyPoisonball", Lowest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_Projectile_EnemyPoisonball, null)
	THEN
		Add(%ActionScore_Projectile_EnemyPoisonball, %SkillTargetScore_Projectile_EnemyPoisonball)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Projectile_EnemyPoisonball
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Projectile_EnemyPoisonball
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	CHARACTERSTAT:_ResistType = PoisonResistance
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Projectile_EnemyPoisonball")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1|!c2"
					CharacterGetStat(_StatResistance, _Char, _ResistType)
					IsGreaterThen(_StatResistance, %Projectile_EnemyPoisonball_ResistanceLimit)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, CHARMED)
					THEN
						IF "!c1"
							CharacterHasStatus(_Char, INVULNERABLE)
						THEN
							//Kill range calculation
							IF "c1"
								CharacterGetStat(_Vitality,  _Char, Vitality)
							THEN
								//Favor low vitality targets.
								Multiply(_Vitality, -1.0)
								Add(_Vitality, 1.0)
								Multiply(_Vitality, 5.0)
								Add(_Score, _Vitality)
							ENDIF
							
							//Resistance calculation
							Divide(_StatResistance, -100.0)
							Multiply(_StatResistance, 5.0)
							Add(_Score, _StatResistance)
							
							//Marked.
							IF "c1"
								CharacterHasStatus(_Char, AGGRO_MARKED)
							THEN
								Add(_Score, 1.0)
							ENDIF
							
							//Summons are worth less.
							IF "c1"
								CharacterIsSummon(_Char)
							THEN
								Add(_Score, -5.0)
							ENDIF
				
							// Range score calculation
							IF "c1&c2"
								CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_EnemyPoisonball)
								GetDistance(_DistanceToChar, __Me, _Char)
							THEN
								Set(_DistanceScore, _DistanceToChar)
								IF "c1"
									IsGreaterThen(_DistanceScore, _SkillRangeMax)
								THEN
									IF "c1"
										IsEqual(%Projectile_EnemyPoisonball_IAmStationary, INT:0)
									THEN
										Subtract(_DistanceScore, _SkillRangeMax)
										Multiply(_DistanceScore, -1.0)
									ELSE
										Add(_Score, -9000000)
									ENDIF
								ELIF "c1"
									IsLessThen(_DistanceScore, _SkillRangeMin)
								THEN
									IF "c1"
										IsEqual(%Projectile_EnemyPoisonball_IAmStationary, INT:0)
									THEN
										Subtract(_DistanceScore, _SkillRangeMin)
										Multiply(_DistanceScore, 1.0)
									ELSE
										Add(_Score, -9000000)
									ENDIF
								ELSE 
									Set(_DistanceScore, 0.0)
								ENDIF
								Add(_Score, _DistanceScore)
							ENDIF
							
							// Can see score calculation
							IF "!c1"
								CharacterCanSee(__Me, _Char)
							THEN
								IF "c1"
									IsEqual(%Projectile_EnemyPoisonball_IAmStationary, INT:0)
								THEN
									Add(_Score, -10.0)
								ELSE
									Add(_Score, -9000000)
								ENDIF
							ENDIF
							
							IF "c1"
								IsGreaterThen(_Score, %SkillTargetScore_Projectile_EnemyPoisonball)
							THEN
								Set(%SkillTargetChar_Projectile_EnemyPoisonball, _Char)
								Set(%SkillTargetScore_Projectile_EnemyPoisonball, _Score)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	//Attempt to use damaging skill to heal allies with
	//>100% resistance to the damage type.
	ELIF "!c1"
		CharacterIsDead(_Char)
	THEN
		IF "!c1"
			CharacterHasStatus(_Char, CHARMED)
		THEN
			IF "!c1"
				CharacterIsSummon(_Char)
			THEN
				IF "!c1"
					IsEqual(_Char, __Me)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, INVULNERABLE)
					THEN
						IF "!c1|c2"
							CharacterGetStat(_StatResistance, _Char, _ResistType)
							IsGreaterThen(_StatResistance, 150.0)
						THEN
							IF "c1&c2"
								CharacterGetStat(_Vitality,  _Char, Vitality)
								IsLessThen(_Vitality, 0.8)
							THEN
								//Vitality-Resistance calculation: favor low-
								//vitality targets with high resistance.
								Multiply(_Vitality, -1.0)
								Add(_Vitality, 1.0)
								
								//consider resistance above 100
								Subtract(_StatResistance, 100.0)
								Divide(_StatResistance, 100.0)
								Multiply(_StatResistance, 4.0)
								
								Multiply(_Vitality, _StatResistance)
								Add(_Score, _Vitality)
				
								// Range score calculation
								IF "c1&c2"
									CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_EnemyPoisonball)
									GetDistance(_DistanceToChar, __Me, _Char)
								THEN
									Set(_DistanceScore, _DistanceToChar)
									IF "c1"
										IsGreaterThen(_DistanceScore, _SkillRangeMax)
									THEN
										IF "c1"
											IsEqual(%Projectile_EnemyPoisonball_IAmStationary, INT:0)
										THEN
											Subtract(_DistanceScore, _SkillRangeMax)
											Multiply(_DistanceScore, -1.0)
										ELSE
											Add(_Score, -9000000)
										ENDIF
									ELIF "c1"
										IsLessThen(_DistanceScore, _SkillRangeMin)
									THEN
										IF "c1"
											IsEqual(%Projectile_EnemyPoisonball_IAmStationary, INT:0)
										THEN
											Subtract(_DistanceScore, _SkillRangeMin)
											Multiply(_DistanceScore, 1.0)
										ELSE
											Add(_Score, -9000000)
										ENDIF
									ELSE 
										Set(_DistanceScore, 0.0)
									ENDIF
									Add(_Score, _DistanceScore)
								ENDIF
								
								// Can see score calculation
								IF "!c1"
									CharacterCanSee(__Me, _Char)
								THEN
									IF "c1"
										IsEqual(%Projectile_EnemyPoisonball_IAmStationary, INT:0)
									THEN
										Add(_Score, -10.0)
									ELSE
										Add(_Score, -9000000)
									ENDIF
								ENDIF
							
								IF "c1"
									IsGreaterThen(_Score, %SkillTargetScore_Projectile_EnemyPoisonball)
								THEN
									Set(%SkillTargetChar_Projectile_EnemyPoisonball, _Char)
									Set(%SkillTargetScore_Projectile_EnemyPoisonball, _Score)
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	