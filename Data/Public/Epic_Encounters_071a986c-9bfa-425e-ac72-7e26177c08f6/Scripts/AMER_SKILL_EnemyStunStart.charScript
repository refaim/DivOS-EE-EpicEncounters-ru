#TEMPLATE "_SKILL_Base" : Target_EnemyStunStart
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_EnemyStunStart=-1000000
// [GLOBAL_VARS]
FLOAT:%Target_EnemyStunStart_MyInitiative
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_EnemyStunStart
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_EnemyStunStart")
ACTIONS
	Set(%SkillTargetScore_Target_EnemyStunStart, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1"
		CharacterGetStat(%Target_EnemyStunStart_MyInitiative, __Me, Initiative)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_Target_EnemyStunStart", Highest, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_Target_EnemyStunStart, null)
		THEN
			Add(%ActionScore_Target_EnemyStunStart, %SkillTargetScore_Target_EnemyStunStart)
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Target_EnemyStunStart
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_EnemyStunStart
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	FLOAT:_SaveScore
	FLOAT:_TargetInit
	INT:_SaveAmount
	ABILITY:_SaveType = BodyBuilding

	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_EnemyStunStart")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)	//Don't attack charmed friends.
				THEN
					IF "!c1&!c2&!c3&!c4"
						CharacterHasTalent(_Char, StandYourGround)
						CharacterHasStatus(_Char, CONSUME, AMER_STATUS_KnockedDownImmune1)
						CharacterHasStatus(_Char, CONSUME, AMER_STATUS_KnockedDownImmune2)
						CharacterHasStatus(_Char, CONSUME, AMER_STATUS_KnockedDownImmune3)
					THEN
						IF "!c1"
							CharacterHasStatus(_Char, INVULNERABLE)
						THEN
							IF "!c1&!c2&!c3&!c4&!c5&!c6&!c7"
								//Don't disable disabled characters.
								CharacterHasStatus(_Char, FEAR)
								CharacterHasStatus(_Char, STUNNED)
								CharacterHasStatus(_Char, FROZEN)
								CharacterHasStatus(_Char, PETRIFIED)
								CharacterHasStatus(_Char, KNOCKED_DOWN)
								CharacterHasStatus(_Char, BLIND)
								CharacterHasStatus(_Char, MUTED)
							THEN
								//Favor high vitality targets.
								Multiply(_Vitality, 2.0)
								Add(_Score, _Vitality)
								
								//Summons are worth less.
								IF "c1"
									CharacterIsSummon(_Char)
								THEN
									Add(_Score, -5.0)
								ENDIF
								
								//Status Calculation
								IF "c1"
									CharacterHasStatus(_Char, SLOWED)
								THEN
									Add(_Score, -1.0)
								ENDIF
								IF "c1"
									CharacterHasStatus(_Char, CRIPPLED)
								THEN
									Add(_Score, -1.0)
								ENDIF
								IF "c1"
									CharacterHasStatus(_Char, WEAK)
								THEN
									Add(_Score, -1.0)
								ENDIF
								IF "c1"
									CharacterHasStatus(_Char, CURSED)
								THEN
									Add(_Score, -0.5)
								ENDIF
								IF "c1"
									CharacterHasStatus(_Char, HASTED)
								THEN
									Add(_Score, 1.0)
								ENDIF
								IF "c1"
									CharacterHasStatus(_Char, CONSUME, SKILLBOOST_TargetedDamageBoost)
								THEN
									Add(_Score, 1.0)
								ENDIF
								IF "c1"
									CharacterHasStatus(_Char, RAGED)
								THEN
									Add(_Score, 1.0)
								ENDIF
									
								//Favor targets that haven't taken their turn yet.
								IF "c1"
									CharacterGetStat(_TargetInit, _Char, Initiative)
								THEN
									IF "c1"
										IsLessThen(_TargetInit, %Target_EnemyStunStart_MyInitiative)
									THEN
										Add(_Score, 1.0)
									ENDIF
								ENDIF
									
								//Marked
								IF "c1"
									CharacterHasStatus(_Char, AGGRO_MARKED)
								THEN
									Add(_Score, 1.0)
								ENDIF
									
								//Saving Throw score calculation
								IF "c1"
									CharacterGetAbility(_SaveAmount, _Char, _SaveType)
								THEN
									Cast(_SaveScore, _SaveAmount)
									Multiply(_SaveScore, -2.0)
									Add(_Score, _SaveScore)
								ENDIF
									
								// Range score calculation
								IF "c1&c2"
									CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_EnemyStunStart)
									GetDistance(_DistanceToChar, __Me, _Char)
								THEN
									Set(_DistanceScore, _DistanceToChar)
									IF "c1"
										IsGreaterThen(_DistanceScore, _SkillRangeMax)
									THEN
										Subtract(_DistanceScore, _SkillRangeMax)
										Multiply(_DistanceScore, -1.0)
									ELIF "c1"
										IsLessThen(_DistanceScore, _SkillRangeMin)
									THEN
										Subtract(_DistanceScore, _SkillRangeMin)
										Multiply(_DistanceScore, 1.0)
									ELSE 
										Set(_DistanceScore, 0.0)
									ENDIF
									Add(_Score, _DistanceScore)
								ENDIF
									
								// Can see score calculation
								IF "!c1"
									CharacterCanSee(__Me, _Char)
								THEN
									Add(_Score, -10.0)
								ENDIF
								
								IF "c1"
									IsGreaterThen(_Score, %SkillTargetScore_Target_EnemyStunStart)
								THEN
									Set(%SkillTargetChar_Target_EnemyStunStart, _Char)
									Set(%SkillTargetScore_Target_EnemyStunStart, _Score)
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	