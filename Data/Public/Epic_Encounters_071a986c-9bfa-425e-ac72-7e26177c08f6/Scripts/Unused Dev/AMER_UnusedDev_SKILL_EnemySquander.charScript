#TEMPLATE "_SKILL_Base" : AMER_SKILL_Squander
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_AMER_SKILL_Squander=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%AMER_SKILL_Squander_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_AMER_SKILL_Squander
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_AP
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_AMER_SKILL_Squander")
ACTIONS
	Set(%SkillTargetScore_AMER_SKILL_Squander, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "c1&!c2"
		CharacterGetStat(_AP, __Me, ActionPoints)
		IsGreaterThen(_AP, 3.0)
	THEN
		IterateCharactersInCombat(__Me, "CalculateTarget_AMER_SKILL_Squander", Random, Vitality)
		IF "!c1"
			IsEqual(%SkillTargetChar_AMER_SKILL_Squander, null)
		THEN
			Add(%ActionScore_AMER_SKILL_Squander, %SkillTargetScore_AMER_SKILL_Squander)
		ENDIF
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_AMER_SKILL_Squander
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_AMER_SKILL_Squander
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	CHARACTERSTAT:_ResistType = CrushingResistance
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_AMER_SKILL_Squander")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1"
					CharacterHasStatus(_Char, CHARMED)
				THEN
					IF "!c1|!c2"
					    CharacterGetStat(_StatResistance, _Char, _ResistType)
					    IsGreaterThen(_StatResistance, %AMER_SKILL_Squander_ResistanceLimit)
					THEN
						//Kill range calculation
						IF "c1"
							CharacterGetStat(_Vitality,  _Char, Vitality)
						THEN
							//Favor low vitality targets.
							Multiply(_Vitality, -2.0)
							Add(_Score, _Vitality)
						ENDIF
						
						//Resistance calculation
						Divide(_StatResistance, -100.0)
						Multiply(_StatResistance, 5.0)
						Add(_Score, _StatResistance)
						
						//Marked.
					    IF "c1"
							CharacterHasStatus(_Char, AGGRO_MARKED)
					    THEN
							Add(_Score, 1.0)
					    ENDIF
							
						//Summons are worth less.
						IF "c1"
							CharacterIsSummon(_Char)
						THEN
							Add(_Score, -5.0)
						ENDIF
						
					    // Range score calculation
						IF "c1&c2"
						    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, AMER_SKILL_Squander)
						    GetDistance(_DistanceToChar, __Me, _Char)
						THEN
						    Set(_DistanceScore, _DistanceToChar)
						    IF "(c1)"
								IsGreaterThen(_DistanceScore, _SkillRangeMax)
						    THEN
								Subtract(_DistanceScore, _SkillRangeMax)
								Multiply(_DistanceScore, -1.0)
						    ELIF "(c1)"
								IsLessThen(_DistanceScore, _SkillRangeMin)
						    THEN
								Subtract(_DistanceScore, _SkillRangeMin)
								Multiply(_DistanceScore, 1.0)
						    ELSE 
								Set(_DistanceScore, 0.0)
						    ENDIF
							Add(_Score, _DistanceScore)
						ENDIF
					    
					    // Can see score calculation
					    IF "!c1"
							CharacterCanSee(__Me, _Char)
					    THEN
							Add(_Score, -10.0)
					    ENDIF
					    
						IF "c1"
							IsGreaterThen(_Score, %SkillTargetScore_AMER_SKILL_Squander)
						THEN
							Set(%SkillTargetChar_AMER_SKILL_Squander, _Char)
							Set(%SkillTargetScore_AMER_SKILL_Squander, _Score)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	