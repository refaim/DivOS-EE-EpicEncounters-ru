#TEMPLATE "_SKILL_Base" : Target_EnemyShockingTouch
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_EnemyShockingTouch=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%Target_EnemyShockingTouch_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Target_EnemyShockingTouch
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_EnemyShockingTouch")
ACTIONS
	Set(%SkillTargetScore_Target_EnemyShockingTouch, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_Target_EnemyShockingTouch", Lowest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_Target_EnemyShockingTouch, null)
	THEN
		Add(%ActionScore_Target_EnemyShockingTouch, %SkillTargetScore_Target_EnemyShockingTouch)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Target_EnemyShockingTouch
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_EnemyShockingTouch
	INT:_SaveAmount
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_SaveScore
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_Vitality
	CHARACTERSTAT:_ResistType = AirResistance
	ABILITY:_SaveType = Willpower
	FIXEDSTRING:_ShieldType = "SKILLBOOST_Shield_Air"
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_EnemyShockingTouch")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1|!c2"
					CharacterGetStat(_StatResistance, _Char, _ResistType)
					IsGreaterThen(_StatResistance, %Target_EnemyShockingTouch_ResistanceLimit)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, CHARMED)
					THEN
						IF "!c1&!c2&!c3&!c4&!c5"
							CharacterHasTalent(_Char, LightningRod)
							CharacterHasStatus(_Char, CONSUME, SKILLBOOST_ImmuneToElectrifying)
							CharacterHasStatus(_Char, CONSUME, AMER_STATUS_StunnedImmune1)
							CharacterHasStatus(_Char, CONSUME, AMER_STATUS_StunnedImmune2)
							CharacterHasStatus(_Char, CONSUME, AMER_STATUS_StunnedImmune3)
						THEN
							IF "!c1"
								CharacterHasStatus(_Char, INVULNERABLE)
							THEN
								IF "!c1&!c2&!c3&!c4&!c5&!c6&!c7"
									//Don't disable disabled characters.
									CharacterHasStatus(_Char, FEAR)
									CharacterHasStatus(_Char, STUNNED)
									CharacterHasStatus(_Char, FROZEN)
									CharacterHasStatus(_Char, PETRIFIED)
									CharacterHasStatus(_Char, KNOCKED_DOWN)
									CharacterHasStatus(_Char, BLIND)
									CharacterHasStatus(_Char, MUTED)
								THEN
									//Kill range calculation
									IF "c1"
										CharacterGetStat(_Vitality,  _Char, Vitality)
									THEN
										//Favor low vitality targets.
										Multiply(_Vitality, -1.0)
										Add(_Vitality, 1.0)
										Multiply(_Vitality, 5.0)
										Add(_Score, _Vitality)
									ENDIF
									
									//Resistance calculation
									Divide(_StatResistance, -100.0)
									Multiply(_StatResistance, 5.0)
									Add(_Score, _StatResistance)
								
									//Shield calculation
									IF "c1"
										CharacterHasStatus(_Char, SHIELD, _ShieldType)
									THEN
										Add(_Score, -2.0)
									ENDIF
									
									//Status Calculation
									IF "c1"
										CharacterHasStatus(_Char, WET)
									THEN
										Add(_Score, 1.0)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, SLOWED)
									THEN
										Add(_Score, -1.0)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, CRIPPLED)
									THEN
										Add(_Score, -1.0)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, WEAK)
									THEN
										Add(_Score, -1.0)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, CURSED)
									THEN
										Add(_Score, -0.5)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, HASTED)
									THEN
										Add(_Score, 1.0)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, CONSUME, SKILLBOOST_TargetedDamageBoost)
									THEN
										Add(_Score, 1.0)
									ENDIF
									IF "c1"
										CharacterHasStatus(_Char, RAGED)
									THEN
										Add(_Score, 1.0)
									ENDIF
									
									//Marked.
									IF "c1"
										CharacterHasStatus(_Char, AGGRO_MARKED)
									THEN
										Add(_Score, 1.0)
									ENDIF
									
									//Saving Throw score calculation
									IF "c1"
										CharacterGetAbility(_SaveAmount, _Char, _SaveType)
									THEN
										Cast(_SaveScore, _SaveAmount)
										Multiply(_SaveScore, -2.0)
										Add(_Score, _SaveScore)
									ENDIF
									
									//Summons are worth less.
									IF "c1"
										CharacterIsSummon(_Char)
									THEN
										Add(_Score, -5.0)
									ENDIF
									
									// Range score calculation
									IF "c1&c2"
										CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_EnemyShockingTouch)
										GetDistance(_DistanceToChar, __Me, _Char)
									THEN
										Set(_DistanceScore, _DistanceToChar)
										IF "c1"
											IsGreaterThen(_DistanceScore, _SkillRangeMax)
										THEN
											Subtract(_DistanceScore, _SkillRangeMax)
											Multiply(_DistanceScore, -1.0)
										ELIF "c1"
											IsLessThen(_DistanceScore, _SkillRangeMin)
										THEN
											Subtract(_DistanceScore, _SkillRangeMin)
											Multiply(_DistanceScore, 1.0)
										ELSE 
											Set(_DistanceScore, 0.0)
										ENDIF
										Add(_Score, _DistanceScore)
									ENDIF
									
									// Can see score calculation
									IF "!c1"
										CharacterCanSee(__Me, _Char)
									THEN
										Add(_Score, -10.0)
									ENDIF
									
									IF "c1"
										IsGreaterThen(_Score, %SkillTargetScore_Target_EnemyShockingTouch)
									THEN
										Set(%SkillTargetChar_Target_EnemyShockingTouch, _Char)
										Set(%SkillTargetScore_Target_EnemyShockingTouch, _Score)
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	