#TEMPLATE "_SKILL_Base" : Projectile_InfectiousFlame
	
INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Projectile_InfectiousFlame=-1000000
// [GLOBAL_VARS]
EXTERN FLOAT:%Projectile_InfectiousFlame_ResistanceLimit = 90
// [~GLOBAL_VARS]
	
EVENTS
	
// [EVENTS]
// [~EVENTS]
	
// Calculate the priority of the skill
EVENT CalculateScore_Projectile_InfectiousFlame
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT3:_TargetPos
	FLOAT:_Vitality
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Projectile_InfectiousFlame")
ACTIONS
	Set(%SkillTargetScore_Projectile_InfectiousFlame, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_Projectile_InfectiousFlame", Highest, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_Projectile_InfectiousFlame, null)
	THEN
		Add(%ActionScore_Projectile_InfectiousFlame, %SkillTargetScore_Projectile_InfectiousFlame)
	ENDIF
	// [~CALC_ACTIONS]
	
	
	
	
// Calculate the character we should attack
EVENT CalculateTarget_Projectile_InfectiousFlame
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Projectile_InfectiousFlame
	FLOAT:_StatResistance
	FLOAT:_Score
	FLOAT:_Vitality
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	FLOAT:_SaveScore
	INT:_SaveAmount
	ABILITY:_SaveType = BodyBuilding
	FIXEDSTRING:_ShieldType = "SKILLBOOST_Shield_Fire"
	CHARACTERSTAT:_ResistType = FireResistance
	
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Projectile_InfectiousFlame")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "c1"
	    CharacterIsEnemy(__Me, _Char)
	THEN
		IF "!c1"
			CharacterIsDead(_Char)
		THEN
			IF "!c1&!c2"
			    CharacterHasStatus(_Char, INVISIBLE)
			    CharacterHasStatus(_Char, SNEAKING)
			THEN
				IF "!c1|!c2"
				    CharacterGetStat(_StatResistance, _Char, ShadowResistance)
				    IsGreaterThen(_StatResistance, %Projectile_InfectiousFlame_ResistanceLimit)
				THEN
					IF "!c1"
						CharacterHasStatus(_Char, CHARMED)
					THEN
						IF "!c1"
							CharacterHasStatus(_Char, INVULNERABLE)
						THEN
							IF "!c1"
								CharacterHasStatus(_Char, CONSUME, "AMER_STATUS_InfectiousFlame")
							THEN
								//Kill range calculation
								IF "c1"
									CharacterGetStat(_Vitality,  _Char, Vitality)
								THEN
									//Favor high vitality targets.
									Multiply(_Vitality, 2.0)
									Add(_Score, _Vitality)
								ENDIF
								
								//Resistance calculation
								Divide(_StatResistance, -100.0)
								Multiply(_StatResistance, 5.0)
								Add(_Score, _StatResistance)
							
								//Shield calculation
								IF "c1"
									CharacterHasStatus(_Char, SHIELD, _ShieldType)
								THEN
									Add(_Score, -2.0)
								ENDIF
								
								//Marked.
							    IF "c1"
									CharacterHasStatus(_Char, AGGRO_MARKED)
							    THEN
									Add(_Score, 1.0)
							    ENDIF
									
								//Summons are worth less.
								IF "c1"
									CharacterIsSummon(_Char)
								THEN
									Add(_Score, -5.0)
								ENDIF
								
								//Saving Throw score calculation
								IF "c1"
									CharacterGetAbility(_SaveAmount, _Char, _SaveType)
								THEN
									Cast(_SaveScore, _SaveAmount)
									Multiply(_SaveScore, -1.0)
									Add(_Score, _SaveScore)
								ENDIF
								
							    // Range score calculation
								IF "c1&c2"
								    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Projectile_InfectiousFlame)
								    GetDistance(_DistanceToChar, __Me, _Char)
								THEN
								    Set(_DistanceScore, _DistanceToChar)
								    IF "c1"
										IsGreaterThen(_DistanceScore, _SkillRangeMax)
								    THEN
										Subtract(_DistanceScore, _SkillRangeMax)
										Multiply(_DistanceScore, -1.0)
								    ELIF "c1"
										IsLessThen(_DistanceScore, _SkillRangeMin)
								    THEN
										Subtract(_DistanceScore, _SkillRangeMin)
										Multiply(_DistanceScore, 1.0)
								    ELSE 
										Set(_DistanceScore, 0.0)
								    ENDIF
									Add(_Score, _DistanceScore)
								ENDIF
							    
							    // Can see score calculation
							    IF "!c1"
									CharacterCanSee(__Me, _Char)
							    THEN
									Add(_Score, -10.0)
							    ENDIF
							    
								IF "c1"
									IsGreaterThen(_Score, %SkillTargetScore_Projectile_InfectiousFlame)
								THEN
									Set(%SkillTargetChar_Projectile_InfectiousFlame, _Char)
									Set(%SkillTargetScore_Projectile_InfectiousFlame, _Score)
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	